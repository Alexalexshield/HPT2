

HI-TECH Software PICC Macro Assembler V9.60PL3 build 3862 
                                                      Wed Apr 29 16:34:20 2020

HI-TECH Software Code Generator build 3862
     1                           	processor	16F887
     2                           	opt	pw 79
     3                           	psect	rdata_0,global,class=BANK0,space=1,delta
      +                          =1
     4                           	psect	idata_0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	const1,local,class=CONST,delta=2
     7                           	psect	const2,local,class=CONST,delta=2
     8                           	psect	const3,local,class=CONST,delta=2
     9                           	psect	const4,local,class=CONST,delta=2
    10                           	psect	text2,local,class=CODE,delta=2
    11                           	psect	text4,local,class=CODE,delta=2
    12                           	psect	text8,local,class=CODE,delta=2
    13                           	psect	text9,local,class=CODE,delta=2
    14                           	psect	text11,local,class=CODE,delta=2
    15                           	psect	rbss_1,global,class=BANK1,space=1,delta=
      +                          1
    16                           	psect	temp,global,ovrld,class=BANK0,space=1,de
      +                          lta=1
    17  0000                     
    18  0000                     
    19  0000                     
    20  0000                     
    21  0000                     
    22  0000                     
    23  0000                     
    24  0000                     
    25  0000                     
    26  0000                     
    27  0000                     
    28                           
    29                           	psect	rdata_0
    30  004F                     _vlf_state
                     _vlf_state
    31  004F                     	ds	1
    32                           
    33                           	psect	idata_0
    34  026D  3400               	retlw	0
    35                           
    36                           	psect	const1
    37  1049  0782               	addwf	2
    38  104A                     _su2mu_preamble
    39  104A  3401               	retlw	1
    40  104B  3400               	retlw	0
    41  104C  3401               	retlw	1
    42  104D  3400               	retlw	0
    43  104E  3400               	retlw	0
    44  104F  3401               	retlw	1
    45  1050  3400               	retlw	0
    46  1051  3401               	retlw	1
    47  1052  3401               	retlw	1
    48  1053  3400               	retlw	0
    49  1054  3401               	retlw	1
    50  1055  3400               	retlw	0
    51                           
    52                           	psect	const2
    53  108A  0782               	addwf	2
    54  108B                     _aps_preamble
    55  108B  3401               	retlw	1
    56  108C  3400               	retlw	0
    57  108D  3401               	retlw	1
    58  108E  3401               	retlw	1
    59  108F  3400               	retlw	0
    60                           
    61                           	psect	const3
    62  1081  0782               	addwf	2
    63  1082                     _mu2su_preamble
    64  1082  3401               	retlw	1
    65  1083  3400               	retlw	0
    66  1084  3401               	retlw	1
    67  1085  3400               	retlw	0
    68  1086  3400               	retlw	0
    69  1087  3401               	retlw	1
    70  1088  3400               	retlw	0
    71  1089  3401               	retlw	1
    72                           
    73                           	psect	const4
    74  106E  0782               	addwf	2
    75  106F                     _uncoded_rx_data_size
    76  106F  3402               	retlw	2
    77  1070  3405               	retlw	5
    78  1071  3400               	retlw	0
    79  1072  3400               	retlw	0
    80  1073  3404               	retlw	4
    81  1074  3400               	retlw	0
    82  1075  3400               	retlw	0
    83  1076  3400               	retlw	0
    84  1077  3404               	retlw	4
    85  0000                     _get_crc$data	set	?_get_crc
    86                           
    87                           	psect	text2
    88  155D                     __end_of_buffcrc
    89  155D                     _VLF_Busy
    90                           ;vlf_comms2.c: 195: uchar VLF_Busy(void)
    91  155D  1683               	bsf	3,5
    92  155E  1303               	bcf	3,6	;carry unused
    93  155F  0B2F               	decfsz	_vrx^(0+128),w
    94  1560  2D66               	goto	l59
    95  1561  08A0               	movf	_vtx^(0+128)
    96  1562  1D03               	btfss	3,2
    97  1563  2D66               	goto	l59
    98                           ;vlf_comms2.c: 198: return( (0) );
    99  1564  3000               	movlw	0
   100  1565  2D67               	goto	l58
   101  1566                     l59
   102                           ;vlf_comms2.c: 200: return( (1) );
   103  1566  3001               	movlw	1
   104                           ;vlf_comms2.c: 201: }
   105  1567                     l58
   106  1567  1283               	bcf	3,5
   107  1568  0008               	return	;uses W
   108                           
   109                           	psect	text4
   110  097C                     __end_of_VLF_ProcessPacket
   111  097C                     _VLF_ProcessBitRead
   112                           ;	_ii assigned to ?a_VLF_ProcessBitRead+0
   113  0000                     _VLF_ProcessBitRead$ii	set	?a_VLF_ProcessBitRea
      +                          d
   114                           ;vlf_comms2.c: 414: char VLF_ProcessBitRead(voi
      +                          d)
   115  097C  1683               	bsf	3,5
   116  097D  1303               	bcf	3,6	;carry unused
   117  097E  01AF               	clrf	_vrx^(0+128)
   118                           ;vlf_comms2.c: 422: switch( vrx.state )
   119  097F  2B5D               	goto	l88
   120  0980                     l89
   121                           ;vlf_comms2.c: 423: {
   122                           ;vlf_comms2.c: 427: {
   123  0980  3014               	movlw	20
   124  0981  0230               	subwf	(_vrx+1)^(0+128),w
   125  0982  1C03               	btfss	3,0
   126  0983  2B59               	goto	l137
   127                           ;vlf_comms2.c: 429: {
   128  0984  1283               	bcf	3,5
   129  0985  01BD               	clrf	?a_VLF_ProcessBitRead
   130  0986  1683               	bsf	3,5
   131  0987  01B9               	clrf	(_vrx+10)^(0+128)
   132  0988  01B4               	clrf	(_vrx+5)^(0+128)
   133  0989  01B5               	clrf	(_vrx+6)^(0+128)
   134                           ;vlf_comms2.c: 431: ( ii < 5 )&&( !vrx.unlocked
      +                           ); ii++ )
   135  098A  29F1               	goto	l94
   136  098B                     l91
   137                           ;vlf_comms2.c: 432: {
   138  098B  1283               	bcf	3,5
   139  098C  083D               	movf	?a_VLF_ProcessBitRead,w
   140  098D  00F4               	movwf	btemp
   141  098E  1003               	bcf	3,0
   142  098F  0DF4               	rlf	btemp
   143  0990  1003               	bcf	3,0
   144  0991  0D74               	rlf	btemp,w
   145  0992  3E0C               	addlw	12
   146  0993  3EAF               	addlw	_vrx
   147  0994  0084               	movwf	4
   148  0995  1383               	bcf	3,7
   149  0996  0800               	movf	0,w
   150  0997  00F7               	movwf	btemp+3
   151  0998  083D               	movf	?a_VLF_ProcessBitRead,w
   152  0999  00F4               	movwf	btemp
   153  099A  1003               	bcf	3,0
   154  099B  0DF4               	rlf	btemp
   155  099C  1003               	bcf	3,0
   156  099D  0D74               	rlf	btemp,w
   157  099E  3E0B               	addlw	11
   158  099F  3EAF               	addlw	_vrx
   159  09A0  0084               	movwf	4
   160  09A1  1383               	bcf	3,7
   161  09A2  0800               	movf	0,w
   162  09A3  00F6               	movwf	btemp+2
   163  09A4  083D               	movf	?a_VLF_ProcessBitRead,w
   164  09A5  00F4               	movwf	btemp
   165  09A6  1003               	bcf	3,0
   166  09A7  0DF4               	rlf	btemp
   167  09A8  1003               	bcf	3,0
   168  09A9  0D74               	rlf	btemp,w
   169  09AA  3E0D               	addlw	13
   170  09AB  3EAF               	addlw	_vrx
   171  09AC  0084               	movwf	4
   172  09AD  1383               	bcf	3,7
   173  09AE  0800               	movf	0,w
   174  09AF  00F5               	movwf	btemp+1
   175  09B0  083D               	movf	?a_VLF_ProcessBitRead,w
   176  09B1  00F4               	movwf	btemp
   177  09B2  1003               	bcf	3,0
   178  09B3  0DF4               	rlf	btemp
   179  09B4  1003               	bcf	3,0
   180  09B5  0D74               	rlf	btemp,w
   181  09B6  3E0E               	addlw	14
   182  09B7  3EAF               	addlw	_vrx
   183  09B8  0084               	movwf	4
   184  09B9  1383               	bcf	3,7
   185  09BA  0800               	movf	0,w
   186  09BB  0775               	addwf	btemp+1,w
   187  09BC  0776               	addwf	btemp+2,w
   188  09BD  0777               	addwf	btemp+3,w
   189  09BE  1683               	bsf	3,5
   190  09BF  00B8               	movwf	(_vrx+9)^(0+128)
   191                           ;vlf_comms2.c: 438: vrx.score >>= 3;
   192  09C0  1003               	bcf	3,0
   193  09C1  0CB8               	rrf	(_vrx+9)^(0+128)
   194  09C2  1003               	bcf	3,0
   195  09C3  0CB8               	rrf	(_vrx+9)^(0+128)
   196  09C4  1003               	bcf	3,0
   197  09C5  0CB8               	rrf	(_vrx+9)^(0+128)
   198                           ;vlf_comms2.c: 440: if( aps_preamble[ii] )
   199  09C6  3010               	movlw	_aps_preamble shr (0+8)
   200  09C7  008A               	movwf	10
   201  09C8  1283               	bcf	3,5
   202  09C9  083D               	movf	?a_VLF_ProcessBitRead,w
   203  09CA  208A               	call	((_aps_preamble+-1)& (0+2047))| (($)& (0+
      +                          -2048))
   204  09CB  120A  158A         	pagesel	$
   205  09CD  3800               	iorlw	0
   206  09CE  1903               	btfsc	3,2
   207  09CF  29E3               	goto	l95
   208                           ;vlf_comms2.c: 441: { if( vrx.score <= 3 )
   209  09D0  3004               	movlw	4
   210  09D1  1683               	bsf	3,5
   211  09D2  0238               	subwf	(_vrx+9)^(0+128),w
   212  09D3  1C03               	btfss	3,0
   213  09D4  29E8               	goto	u410
   214                           ;vlf_comms2.c: 442: vrx.unlocked = 1;
   215                           ;vlf_comms2.c: 443: else
   216  09D5  300A               	movlw	10
   217  09D6  00F4               	movwf	btemp
   218  09D7  01F5               	clrf	btemp+1
   219  09D8  0838               	movf	(_vrx+9)^(0+128),w
   220  09D9  02F4               	subwf	btemp
   221  09DA  1C03               	btfss	3,0
   222  09DB  03F5               	decf	btemp+1
   223  09DC  0874               	movf	btemp,w
   224  09DD  07B4               	addwf	(_vrx+5)^(0+128)
   225  09DE  1803               	btfsc	3,0
   226  09DF  0AB5               	incf	(_vrx+6)^(0+128)
   227  09E0  0875               	movf	btemp+1,w
   228  09E1  07B5               	addwf	(_vrx+6)^(0+128)
   229                           ;vlf_comms2.c: 445: }
   230  09E2  29EF               	goto	l98
   231  09E3                     l95
   232                           ;vlf_comms2.c: 446: else
   233  09E3  3002               	movlw	2
   234  09E4  1683               	bsf	3,5
   235  09E5  0238               	subwf	(_vrx+9)^(0+128),w
   236  09E6  1C03               	btfss	3,0
   237  09E7  29EB               	goto	l99
   238  09E8                     u410
   239                           ;vlf_comms2.c: 448: vrx.unlocked = 1;
   240  09E8  01B9               	clrf	(_vrx+10)^(0+128)
   241  09E9  0AB9               	incf	(_vrx+10)^(0+128)
   242  09EA  29EF               	goto	l98
   243  09EB                     l99
   244                           ;vlf_comms2.c: 449: else
   245  09EB  0838               	movf	(_vrx+9)^(0+128),w
   246  09EC  07B4               	addwf	(_vrx+5)^(0+128)
   247  09ED  1803               	btfsc	3,0
   248  09EE  0AB5               	incf	(_vrx+6)^(0+128)
   249  09EF                     l98
   250  09EF  1283               	bcf	3,5
   251  09F0  0ABD               	incf	?a_VLF_ProcessBitRead
   252  09F1                     l94
   253  09F1  3005               	movlw	5
   254  09F2  1283               	bcf	3,5
   255  09F3  023D               	subwf	?a_VLF_ProcessBitRead,w
   256  09F4  1683               	bsf	3,5
   257  09F5  1803               	btfsc	3,0
   258  09F6  29FA               	goto	L5
   259  09F7  08B9               	movf	(_vrx+10)^(0+128)
   260  09F8  1903               	btfsc	3,2
   261  09F9  298B               	goto	l91
   262                           ;vlf_comms2.c: 451: }
   263  09FA                     L5
   264  09FA  0A36               	incf	(_vrx+7)^(0+128),w
   265  09FB  1903               	btfsc	3,2
   266  09FC  0A37               	incf	(_vrx+8)^(0+128),w
   267  09FD  1903               	btfsc	3,2
   268  09FE  2ABA               	goto	l121
   269                           ;vlf_comms2.c: 455: { if( ( vrx.unlocked )||( v
      +                          rx.preamble_score > vrx.prev_preamble_score ) )
   270  09FF  08B9               	movf	(_vrx+10)^(0+128)
   271  0A00  1D03               	btfss	3,2
   272  0A01  2A0A               	goto	u480
   273  0A02  0835               	movf	(_vrx+6)^(0+128),w
   274  0A03  0237               	subwf	(_vrx+8)^(0+128),w
   275  0A04  1D03               	btfss	3,2
   276  0A05  2A08               	goto	u475
   277  0A06  0834               	movf	(_vrx+5)^(0+128),w
   278  0A07  0236               	subwf	(_vrx+7)^(0+128),w
   279  0A08                     u475
   280  0A08  1803               	btfsc	3,0
   281  0A09  2ABD               	goto	L4
   282  0A0A                     u480
   283                           ;vlf_comms2.c: 456: {
   284  0A0A  01B0               	clrf	(_vrx+1)^(0+128)
   285  0A0B  0AB0               	incf	(_vrx+1)^(0+128)
   286                           ;vlf_comms2.c: 458: vrx.prev_preamble_score = 0
      +                          xFFFF;
   287  0A0C  30FF               	movlw	255
   288  0A0D  00B6               	movwf	(_vrx+7)^(0+128)
   289  0A0E  00B7               	movwf	((_vrx+7)^(0+128)+1)
   290                           ;vlf_comms2.c: 459: RB0 ^= 1;
   291  0A0F  1283               	bcf	3,5
   292  0A10  3001               	movlw	1
   293  0A11  0686               	xorwf	6
   294                           ;vlf_comms2.c: 461: if(vrx.flags.aps.combiner =
      +                          = (0))
   295  0A12  1683               	bsf	3,5
   296  0A13  1BEA               	btfsc	(_vrx+59)^(0+128),7
   297  0A14  2A25               	goto	l103
   298                           ;vlf_comms2.c: 462: {
   299  0A15  1283               	bcf	3,5
   300  0A16  17A4               	bsf	_mu_flags,7
   301                           ;vlf_comms2.c: 466: if( lamp_state == LAMP_NORM
      +                          AL_STATE )
   302  0A17  0822               	movf	_lamp_state,w
   303  0A18  3AF0               	xorlw	-16
   304  0A19  1D03               	btfss	3,2
   305  0A1A  2A25               	goto	l103
   306                           ;vlf_comms2.c: 467: {
   307  0A1B  3004               	movlw	4
   308  0A1C  00A2               	movwf	_lamp_state
   309                           ;vlf_comms2.c: 469: lamp_timeout = (timer.cnt +
      +                           (ushort)((ushort)( 1*(15.2588))));
   310  0A1D  300F               	movlw	15
   311  0A1E  0734               	addwf	_timer,w	;volatile
   312  0A1F  00A6               	movwf	_lamp_timeout
   313  0A20  3000               	movlw	0
   314  0A21  1803               	btfsc	3,0
   315  0A22  3001               	movlw	1
   316  0A23  0735               	addwf	_timer+1,w	;volatile
   317  0A24  00A7               	movwf	_lamp_timeout+1
   318  0A25                     l103
   319                           ;vlf_comms2.c: 470: }
   320  0A25  1283               	bcf	3,5
   321  0A26  17A4               	bsf	_mu_flags,7
   322                           ;vlf_comms2.c: 473: }
   323  0A27  2B6C               	goto	l87
   324                           ;vlf_comms2.c: 474: else
   325                           ;vlf_comms2.c: 476: }
   326                           ;vlf_comms2.c: 477: else if( !vrx.unlocked )
   327                           ;vlf_comms2.c: 478: {
   328                           ;vlf_comms2.c: 480: }
   329                           ;vlf_comms2.c: 482: else
   330                           ;vlf_comms2.c: 488: }
   331  0A28                     l109
   332                           ;vlf_comms2.c: 492: case VLF_RX_SEEKING:
   333                           ;vlf_comms2.c: 494: {
   334  0A28  3030               	movlw	48
   335  0A29  0230               	subwf	(_vrx+1)^(0+128),w
   336  0A2A  1C03               	btfss	3,0
   337  0A2B  2B59               	goto	l137
   338                           ;vlf_comms2.c: 496: {
   339  0A2C  1283               	bcf	3,5
   340  0A2D  01BD               	clrf	?a_VLF_ProcessBitRead
   341  0A2E  1683               	bsf	3,5
   342  0A2F  01B9               	clrf	(_vrx+10)^(0+128)
   343  0A30  01B4               	clrf	(_vrx+5)^(0+128)
   344  0A31  01B5               	clrf	(_vrx+6)^(0+128)
   345                           ;vlf_comms2.c: 498: ( ii < 12 )&&( !vrx.unlocke
      +                          d ); ii++ )
   346  0A32  2A99               	goto	l114
   347  0A33                     l111
   348                           ;vlf_comms2.c: 499: {
   349  0A33  1283               	bcf	3,5
   350  0A34  083D               	movf	?a_VLF_ProcessBitRead,w
   351  0A35  00F4               	movwf	btemp
   352  0A36  1003               	bcf	3,0
   353  0A37  0DF4               	rlf	btemp
   354  0A38  1003               	bcf	3,0
   355  0A39  0D74               	rlf	btemp,w
   356  0A3A  3E0C               	addlw	12
   357  0A3B  3EAF               	addlw	_vrx
   358  0A3C  0084               	movwf	4
   359  0A3D  1383               	bcf	3,7
   360  0A3E  0800               	movf	0,w
   361  0A3F  00F7               	movwf	btemp+3
   362  0A40  083D               	movf	?a_VLF_ProcessBitRead,w
   363  0A41  00F4               	movwf	btemp
   364  0A42  1003               	bcf	3,0
   365  0A43  0DF4               	rlf	btemp
   366  0A44  1003               	bcf	3,0
   367  0A45  0D74               	rlf	btemp,w
   368  0A46  3E0B               	addlw	11
   369  0A47  3EAF               	addlw	_vrx
   370  0A48  0084               	movwf	4
   371  0A49  1383               	bcf	3,7
   372  0A4A  0800               	movf	0,w
   373  0A4B  00F6               	movwf	btemp+2
   374  0A4C  083D               	movf	?a_VLF_ProcessBitRead,w
   375  0A4D  00F4               	movwf	btemp
   376  0A4E  1003               	bcf	3,0
   377  0A4F  0DF4               	rlf	btemp
   378  0A50  1003               	bcf	3,0
   379  0A51  0D74               	rlf	btemp,w
   380  0A52  3E0D               	addlw	13
   381  0A53  3EAF               	addlw	_vrx
   382  0A54  0084               	movwf	4
   383  0A55  1383               	bcf	3,7
   384  0A56  0800               	movf	0,w
   385  0A57  00F5               	movwf	btemp+1
   386  0A58  083D               	movf	?a_VLF_ProcessBitRead,w
   387  0A59  00F4               	movwf	btemp
   388  0A5A  1003               	bcf	3,0
   389  0A5B  0DF4               	rlf	btemp
   390  0A5C  1003               	bcf	3,0
   391  0A5D  0D74               	rlf	btemp,w
   392  0A5E  3E0E               	addlw	14
   393  0A5F  3EAF               	addlw	_vrx
   394  0A60  0084               	movwf	4
   395  0A61  1383               	bcf	3,7
   396  0A62  0800               	movf	0,w
   397  0A63  0775               	addwf	btemp+1,w
   398  0A64  0776               	addwf	btemp+2,w
   399  0A65  0777               	addwf	btemp+3,w
   400  0A66  1683               	bsf	3,5
   401  0A67  00B8               	movwf	(_vrx+9)^(0+128)
   402                           ;vlf_comms2.c: 513: vrx.score >>= 3;
   403  0A68  1003               	bcf	3,0
   404  0A69  0CB8               	rrf	(_vrx+9)^(0+128)
   405  0A6A  1003               	bcf	3,0
   406  0A6B  0CB8               	rrf	(_vrx+9)^(0+128)
   407  0A6C  1003               	bcf	3,0
   408  0A6D  0CB8               	rrf	(_vrx+9)^(0+128)
   409                           ;vlf_comms2.c: 529: if( su2mu_preamble[ii] )
   410  0A6E  3010               	movlw	_su2mu_preamble shr (0+8)
   411  0A6F  008A               	movwf	10
   412  0A70  1283               	bcf	3,5
   413  0A71  083D               	movf	?a_VLF_ProcessBitRead,w
   414  0A72  2049               	call	((_su2mu_preamble+-1)& (0+2047))| (($)& (
      +                          0+-2048))
   415  0A73  120A  158A         	pagesel	$
   416  0A75  3800               	iorlw	0
   417  0A76  1903               	btfsc	3,2
   418  0A77  2A8B               	goto	l115
   419                           ;vlf_comms2.c: 530: { if( vrx.score <= 3 )
   420  0A78  3004               	movlw	4
   421  0A79  1683               	bsf	3,5
   422  0A7A  0238               	subwf	(_vrx+9)^(0+128),w
   423  0A7B  1C03               	btfss	3,0
   424  0A7C  2A90               	goto	u550
   425                           ;vlf_comms2.c: 531: vrx.unlocked = 1;
   426                           ;vlf_comms2.c: 532: else
   427  0A7D  300A               	movlw	10
   428  0A7E  00F4               	movwf	btemp
   429  0A7F  01F5               	clrf	btemp+1
   430  0A80  0838               	movf	(_vrx+9)^(0+128),w
   431  0A81  02F4               	subwf	btemp
   432  0A82  1C03               	btfss	3,0
   433  0A83  03F5               	decf	btemp+1
   434  0A84  0874               	movf	btemp,w
   435  0A85  07B4               	addwf	(_vrx+5)^(0+128)
   436  0A86  1803               	btfsc	3,0
   437  0A87  0AB5               	incf	(_vrx+6)^(0+128)
   438  0A88  0875               	movf	btemp+1,w
   439  0A89  07B5               	addwf	(_vrx+6)^(0+128)
   440                           ;vlf_comms2.c: 534: }
   441  0A8A  2A97               	goto	l118
   442  0A8B                     l115
   443                           ;vlf_comms2.c: 535: else
   444  0A8B  3002               	movlw	2
   445  0A8C  1683               	bsf	3,5
   446  0A8D  0238               	subwf	(_vrx+9)^(0+128),w
   447  0A8E  1C03               	btfss	3,0
   448  0A8F  2A93               	goto	l119
   449  0A90                     u550
   450                           ;vlf_comms2.c: 537: vrx.unlocked = 1;
   451  0A90  01B9               	clrf	(_vrx+10)^(0+128)
   452  0A91  0AB9               	incf	(_vrx+10)^(0+128)
   453  0A92  2A97               	goto	l118
   454  0A93                     l119
   455                           ;vlf_comms2.c: 538: else
   456  0A93  0838               	movf	(_vrx+9)^(0+128),w
   457  0A94  07B4               	addwf	(_vrx+5)^(0+128)
   458  0A95  1803               	btfsc	3,0
   459  0A96  0AB5               	incf	(_vrx+6)^(0+128)
   460  0A97                     l118
   461  0A97  1283               	bcf	3,5
   462  0A98  0ABD               	incf	?a_VLF_ProcessBitRead
   463  0A99                     l114
   464  0A99  300C               	movlw	12
   465  0A9A  1283               	bcf	3,5
   466  0A9B  023D               	subwf	?a_VLF_ProcessBitRead,w
   467  0A9C  1683               	bsf	3,5
   468  0A9D  1803               	btfsc	3,0
   469  0A9E  2AA2               	goto	L6
   470  0A9F  08B9               	movf	(_vrx+10)^(0+128)
   471  0AA0  1903               	btfsc	3,2
   472  0AA1  2A33               	goto	l111
   473                           ;vlf_comms2.c: 540: }
   474  0AA2                     L6
   475  0AA2  0A36               	incf	(_vrx+7)^(0+128),w
   476  0AA3  1903               	btfsc	3,2
   477  0AA4  0A37               	incf	(_vrx+8)^(0+128),w
   478  0AA5  1903               	btfsc	3,2
   479  0AA6  2ABA               	goto	l121
   480                           ;vlf_comms2.c: 544: { if( ( vrx.unlocked )||( v
      +                          rx.preamble_score > vrx.prev_preamble_score ) )
   481  0AA7  08B9               	movf	(_vrx+10)^(0+128)
   482  0AA8  1D03               	btfss	3,2
   483  0AA9  2AB2               	goto	u620
   484  0AAA  0835               	movf	(_vrx+6)^(0+128),w
   485  0AAB  0237               	subwf	(_vrx+8)^(0+128),w
   486  0AAC  1D03               	btfss	3,2
   487  0AAD  2AB0               	goto	u615
   488  0AAE  0834               	movf	(_vrx+5)^(0+128),w
   489  0AAF  0236               	subwf	(_vrx+7)^(0+128),w
   490  0AB0                     u615
   491  0AB0  1803               	btfsc	3,0
   492  0AB1  2ABD               	goto	L4
   493  0AB2                     u620
   494                           ;vlf_comms2.c: 545: { vrx.state = VLF_RX_LOCKED
      +                          ;
   495  0AB2  3002               	movlw	2
   496  0AB3  00AF               	movwf	_vrx^(0+128)
   497                           ;vlf_comms2.c: 546: vrx.cnt = 1;
   498  0AB4  01B0               	clrf	(_vrx+1)^(0+128)
   499  0AB5  0AB0               	incf	(_vrx+1)^(0+128)
   500                           ;vlf_comms2.c: 547: vrx.prev_preamble_score = 0
      +                          xFFFF;
   501  0AB6  30FF               	movlw	255
   502  0AB7  00B6               	movwf	(_vrx+7)^(0+128)
   503  0AB8  00B7               	movwf	((_vrx+7)^(0+128)+1)
   504                           ;vlf_comms2.c: 548: }
   505  0AB9  2B6C               	goto	l87
   506                           ;vlf_comms2.c: 549: else
   507                           ;vlf_comms2.c: 551: }
   508  0ABA                     l121
   509                           ;vlf_comms2.c: 552: else if( !vrx.unlocked )
   510  0ABA  08B9               	movf	(_vrx+10)^(0+128)
   511  0ABB  1D03               	btfss	3,2
   512  0ABC  2B6C               	goto	l87
   513  0ABD                     L4
   514                           ;vlf_comms2.c: 553: {
   515  0ABD  0834               	movf	(_vrx+5)^(0+128),w
   516  0ABE  00B6               	movwf	(_vrx+7)^(0+128)
   517  0ABF  0835               	movf	(_vrx+6)^(0+128),w
   518  0AC0  00B7               	movwf	(_vrx+8)^(0+128)
   519                           ;vlf_comms2.c: 555: }
   520  0AC1  2B6C               	goto	l87
   521                           ;vlf_comms2.c: 557: else
   522                           ;vlf_comms2.c: 571: }
   523  0AC2                     l127
   524                           ;vlf_comms2.c: 577: case VLF_RX_LOCKED:
   525                           ;vlf_comms2.c: 578: vtx.type = 0x00;
   526  0AC2  01A6               	clrf	(_vtx+6)^(0+128)
   527                           ;vlf_comms2.c: 580: if( (vrx.cnt & (((4)*4) - 1
      +                          ) ) ==
   528  0AC3  0830               	movf	(_vrx+1)^(0+128),w
   529  0AC4  390F               	andlw	15
   530  0AC5  3A0F               	xorlw	15
   531  0AC6  1D03               	btfss	3,2
   532  0AC7  2B59               	goto	l137
   533                           ;vlf_comms2.c: 582: {
   534  0AC8  1283               	bcf	3,5
   535  0AC9  01BD               	clrf	?a_VLF_ProcessBitRead
   536  0ACA                     l129
   537                           ;vlf_comms2.c: 584: {
   538  0ACA  083D               	movf	?a_VLF_ProcessBitRead,w
   539  0ACB  00F4               	movwf	btemp
   540  0ACC  1003               	bcf	3,0
   541  0ACD  0DF4               	rlf	btemp
   542  0ACE  1003               	bcf	3,0
   543  0ACF  0D74               	rlf	btemp,w
   544  0AD0  3C30               	sublw	48
   545  0AD1  3EB7               	addlw	_vrx+8
   546  0AD2  0084               	movwf	4
   547  0AD3  1383               	bcf	3,7
   548  0AD4  0800               	movf	0,w
   549  0AD5  00F7               	movwf	btemp+3
   550  0AD6  083D               	movf	?a_VLF_ProcessBitRead,w
   551  0AD7  00F4               	movwf	btemp
   552  0AD8  1003               	bcf	3,0
   553  0AD9  0DF4               	rlf	btemp
   554  0ADA  1003               	bcf	3,0
   555  0ADB  0D74               	rlf	btemp,w
   556  0ADC  3C30               	sublw	48
   557  0ADD  3EB9               	addlw	_vrx+10
   558  0ADE  0084               	movwf	4
   559  0ADF  1383               	bcf	3,7
   560  0AE0  0800               	movf	0,w
   561  0AE1  00F6               	movwf	btemp+2
   562  0AE2  083D               	movf	?a_VLF_ProcessBitRead,w
   563  0AE3  00F4               	movwf	btemp
   564  0AE4  1003               	bcf	3,0
   565  0AE5  0DF4               	rlf	btemp
   566  0AE6  1003               	bcf	3,0
   567  0AE7  0D74               	rlf	btemp,w
   568  0AE8  3C30               	sublw	48
   569  0AE9  3EB8               	addlw	_vrx+9
   570  0AEA  0084               	movwf	4
   571  0AEB  1383               	bcf	3,7
   572  0AEC  0800               	movf	0,w
   573  0AED  00F5               	movwf	btemp+1
   574  0AEE  083D               	movf	?a_VLF_ProcessBitRead,w
   575  0AEF  00F4               	movwf	btemp
   576  0AF0  1003               	bcf	3,0
   577  0AF1  0DF4               	rlf	btemp
   578  0AF2  1003               	bcf	3,0
   579  0AF3  0D74               	rlf	btemp,w
   580  0AF4  3C30               	sublw	48
   581  0AF5  3EB6               	addlw	_vrx+7
   582  0AF6  0084               	movwf	4
   583  0AF7  1383               	bcf	3,7
   584  0AF8  0800               	movf	0,w
   585  0AF9  0775               	addwf	btemp+1,w
   586  0AFA  0776               	addwf	btemp+2,w
   587  0AFB  0777               	addwf	btemp+3,w
   588  0AFC  1683               	bsf	3,5
   589  0AFD  00B8               	movwf	(_vrx+9)^(0+128)
   590                           ;vlf_comms2.c: 590: vrx.score >>= 3;
   591  0AFE  1003               	bcf	3,0
   592  0AFF  0CB8               	rrf	(_vrx+9)^(0+128)
   593  0B00  1003               	bcf	3,0
   594  0B01  0CB8               	rrf	(_vrx+9)^(0+128)
   595  0B02  1003               	bcf	3,0
   596  0B03  0CB8               	rrf	(_vrx+9)^(0+128)
   597                           ;vlf_comms2.c: 592: vtx.type <<= 1;
   598  0B04  1003               	bcf	3,0
   599  0B05  0DA6               	rlf	(_vtx+6)^(0+128)
   600                           ;vlf_comms2.c: 593: if( vrx.score >= ((((8000)/
      +                          (100)) >> 3)*3/5) )
   601  0B06  3006               	movlw	6
   602  0B07  0238               	subwf	(_vrx+9)^(0+128),w
   603  0B08  1803               	btfsc	3,0
   604                           ;vlf_comms2.c: 594: vtx.type |= 0x01;
   605  0B09  1426               	bsf	(_vtx+6)^(0+128),0
   606  0B0A  1283               	bcf	3,5
   607  0B0B  0ABD               	incf	?a_VLF_ProcessBitRead
   608  0B0C  3004               	movlw	4
   609  0B0D  023D               	subwf	?a_VLF_ProcessBitRead,w
   610  0B0E  1C03               	btfss	3,0
   611  0B0F  2ACA               	goto	l129
   612                           ;vlf_comms2.c: 595: }
   613  0B10  3009               	movlw	9
   614  0B11  1683               	bsf	3,5
   615  0B12  0226               	subwf	(_vtx+6)^(0+128),w
   616  0B13  1803               	btfsc	3,0
   617  0B14  2B26               	goto	l133
   618                           ;vlf_comms2.c: 598: {
   619  0B15  3010               	movlw	_uncoded_rx_data_size shr (0+8)
   620  0B16  008A               	movwf	10
   621  0B17  0826               	movf	(_vtx+6)^(0+128),w
   622  0B18  206E               	call	((_uncoded_rx_data_size+-1)& (0+2047))| (
      +                          ($)& (0+-2048))
   623  0B19  120A  158A         	pagesel	$
   624  0B1B  00F4               	movwf	btemp
   625  0B1C  0A74               	incf	btemp,w
   626  0B1D  00B1               	movwf	(_vrx+2)^(0+128)
   627                           ;vlf_comms2.c: 600: vrx.ptr = &vtx.u.data[0];
   628  0B1E  30A7               	movlw	_vtx+7
   629  0B1F  00B2               	movwf	(_vrx+3)^(0+128)
   630                           ;vlf_comms2.c: 601: vrx.shifter = 0x01;
   631  0B20  01B3               	clrf	(_vrx+4)^(0+128)
   632  0B21  0AB3               	incf	(_vrx+4)^(0+128)
   633                           ;vlf_comms2.c: 602: vrx.state = VLF_RX_RECEIVIN
      +                          G;
   634  0B22  3003               	movlw	3
   635  0B23  00AF               	movwf	_vrx^(0+128)
   636                           ;vlf_comms2.c: 603: vrx.cnt = 1;
   637  0B24  01B0               	clrf	(_vrx+1)^(0+128)
   638  0B25  2B59               	goto	l137
   639                           ;vlf_comms2.c: 604: }
   640  0B26                     l133
   641                           ;vlf_comms2.c: 605: else
   642  0B26  01AF               	clrf	_vrx^(0+128)
   643  0B27  0AAF               	incf	_vrx^(0+128)
   644                           ;vlf_comms2.c: 607: vrx.cnt = 0;
   645  0B28  01B0               	clrf	(_vrx+1)^(0+128)
   646                           ;vlf_comms2.c: 612: }
   647  0B29  2B6C               	goto	l87
   648                           ;vlf_comms2.c: 614: else
   649                           ;vlf_comms2.c: 616: break;
   650  0B2A                     l136
   651                           ;vlf_comms2.c: 619: case VLF_RX_RECEIVING:
   652                           ;vlf_comms2.c: 620: if( ( vrx.cnt & ((4) - 1) )
      +                           == ((4)-1) )
   653  0B2A  0830               	movf	(_vrx+1)^(0+128),w
   654  0B2B  3903               	andlw	3
   655  0B2C  3A03               	xorlw	3
   656  0B2D  1D03               	btfss	3,2
   657  0B2E  2B59               	goto	l137
   658                           ;vlf_comms2.c: 621: {
   659  0B2F  0866               	movf	(_vrx+55)^(0+128),w
   660  0B30  0767               	addwf	(_vrx+56)^(0+128),w
   661  0B31  0769               	addwf	(_vrx+58)^(0+128),w
   662  0B32  0768               	addwf	(_vrx+57)^(0+128),w
   663  0B33  00B8               	movwf	(_vrx+9)^(0+128)
   664                           ;vlf_comms2.c: 626: vrx.score >>= 3;
   665  0B34  1003               	bcf	3,0
   666  0B35  0CB8               	rrf	(_vrx+9)^(0+128)
   667  0B36  1003               	bcf	3,0
   668  0B37  0CB8               	rrf	(_vrx+9)^(0+128)
   669  0B38  1003               	bcf	3,0
   670  0B39  0CB8               	rrf	(_vrx+9)^(0+128)
   671                           ;vlf_comms2.c: 629: if ( vrx.score >= ((((8000)
      +                          /(100)) >> 3)*3/5) )
   672  0B3A  3006               	movlw	6
   673  0B3B  0238               	subwf	(_vrx+9)^(0+128),w
   674                           ;vlf_comms2.c: 630: *vrx.ptr |= vrx.shifter;
   675  0B3C  0832               	movf	(_vrx+3)^(0+128),w
   676  0B3D  0084               	movwf	4
   677  0B3E  1383               	bcf	3,7
   678  0B3F  1C03               	btfss	3,0
   679  0B40  2B44               	goto	L7
   680  0B41  0833               	movf	(_vrx+4)^(0+128),w
   681  0B42  0480               	iorwf	0
   682  0B43  2B46               	goto	l139
   683                           ;vlf_comms2.c: 631: else
   684  0B44                     L7
   685  0B44  0933               	comf	(_vrx+4)^(0+128),w
   686  0B45  0580               	andwf	0
   687  0B46                     l139
   688                           ;vlf_comms2.c: 634: if( vrx.shifter < 0x80 )
   689  0B46  3080               	movlw	-128
   690  0B47  0233               	subwf	(_vrx+4)^(0+128),w
   691  0B48  1803               	btfsc	3,0
   692  0B49  2B4D               	goto	l140
   693                           ;vlf_comms2.c: 635: vrx.shifter <<= 1;
   694  0B4A  1003               	bcf	3,0
   695  0B4B  0DB3               	rlf	(_vrx+4)^(0+128)
   696  0B4C  2B59               	goto	l137
   697  0B4D                     l140
   698                           ;vlf_comms2.c: 636: else
   699  0B4D  01B3               	clrf	(_vrx+4)^(0+128)
   700  0B4E  0AB3               	incf	(_vrx+4)^(0+128)
   701                           ;vlf_comms2.c: 638: vrx.ptr++;
   702  0B4F  0AB2               	incf	(_vrx+3)^(0+128)
   703                           ;vlf_comms2.c: 640: if( !(--vrx.len ) )
   704  0B50  0BB1               	decfsz	(_vrx+2)^(0+128)
   705  0B51  2B59               	goto	l137
   706                           ;vlf_comms2.c: 641: { TMR2IE = 0;
   707  0B52  108C               	bcf	12,1
   708                           ;vlf_comms2.c: 642: TMR2ON = 0;
   709  0B53  1283               	bcf	3,5
   710  0B54  1112               	bcf	18,2
   711                           ;vlf_comms2.c: 643: vrx.state = VLF_PACKET_READ
      +                          Y;
   712  0B55  3004               	movlw	4
   713  0B56  1683               	bsf	3,5
   714  0B57  00AF               	movwf	_vrx^(0+128)
   715  0B58  2B5B               	goto	l143
   716                           ;vlf_comms2.c: 644: return( (1) );
   717  0B59                     l137
   718                           ;vlf_comms2.c: 645: }
   719  0B59  0AB0               	incf	(_vrx+1)^(0+128)
   720                           ;vlf_comms2.c: 657: break;
   721  0B5A  2B6C               	goto	l87
   722  0B5B                     l143
   723                           ;vlf_comms2.c: 659: case VLF_PACKET_READY:
   724                           ;vlf_comms2.c: 660: return( (1) );
   725  0B5B  3001               	movlw	1
   726  0B5C  2B80               	goto	l86
   727  0B5D                     l88
   728  0B5D  082F               	movf	_vrx^(0+128),w
   729  0B5E  1903               	btfsc	3,2
   730  0B5F  2980               	goto	l89
   731  0B60  3A01               	xorlw	1
   732  0B61  1903               	btfsc	3,2
   733  0B62  2A28               	goto	l109
   734  0B63  3A03               	xorlw	3
   735  0B64  1903               	btfsc	3,2
   736  0B65  2AC2               	goto	l127
   737  0B66  3A01               	xorlw	1
   738  0B67  1903               	btfsc	3,2
   739  0B68  2B2A               	goto	l136
   740  0B69  3A07               	xorlw	7
   741  0B6A  1903               	btfsc	3,2
   742  0B6B  2B5B               	goto	l143
   743  0B6C                     l87
   744                           ;vlf_comms2.c: 664: for( ii = 0; ii < sizeof(vr
      +                          x.preamble) - 1; ii++ )
   745  0B6C  1283               	bcf	3,5
   746  0B6D  01BD               	clrf	?a_VLF_ProcessBitRead
   747  0B6E                     l144
   748                           ;vlf_comms2.c: 665: vrx.preamble[ii] = vrx.prea
      +                          mble[ii+1];
   749  0B6E  083D               	movf	?a_VLF_ProcessBitRead,w
   750  0B6F  3EBB               	addlw	_vrx+12
   751  0B70  0084               	movwf	4
   752  0B71  1383               	bcf	3,7
   753  0B72  0800               	movf	0,w
   754  0B73  00F4               	movwf	btemp
   755  0B74  083D               	movf	?a_VLF_ProcessBitRead,w
   756  0B75  3EBA               	addlw	_vrx+11
   757  0B76  0084               	movwf	4
   758  0B77  1383               	bcf	3,7
   759  0B78  0874               	movf	btemp,w
   760  0B79  0080               	movwf	0
   761  0B7A  0ABD               	incf	?a_VLF_ProcessBitRead
   762  0B7B  302F               	movlw	47
   763  0B7C  023D               	subwf	?a_VLF_ProcessBitRead,w
   764  0B7D  1C03               	btfss	3,0
   765  0B7E  2B6E               	goto	l144
   766                           ;vlf_comms2.c: 667: return( (0) );
   767  0B7F  3000               	movlw	0
   768                           ;vlf_comms2.c: 668: }
   769  0B80                     l86
   770  0B80  1283               	bcf	3,5
   771  0B81  0008               	return	;uses W
   772                           
   773                           	psect	text8
   774  1546                     __end_of_VLF_StartReceiver
   775  1546                     _VLF_StopReceiver
   776                           ;vlf_comms2.c: 777: void VLF_StopReceiver(void)
   777  1546  1683               	bsf	3,5
   778  1547  1303               	bcf	3,6	;carry unused
   779  1548  108C               	bcf	12,1
   780                           ;vlf_comms2.c: 780: TMR2ON = 0;
   781  1549  1283               	bcf	3,5
   782  154A  1112               	bcf	18,2
   783                           ;vlf_comms2.c: 781: }
   784  154B  0008               	return	;W free
   785                           
   786                           	psect	text9
   787  0B82                     __end_of_VLF_StopReceiver
   788  0B82                     _VLF_SendPacket
   789                           ;vlf_comms2.c: 788: static void VLF_SendPacket(
      +                          void)
   790  0B82  1683               	bsf	3,5
   791  0B83  1303               	bcf	3,6	;carry unused
   792  0B84  108C               	bcf	12,1
   793                           ;vlf_comms2.c: 795: TMR2ON = 0;
   794  0B85  1283               	bcf	3,5
   795  0B86  1112               	bcf	18,2
   796                           ;vlf_comms2.c: 796: TMR2 = 0;
   797  0B87  0191               	clrf	17	;volatile
   798                           ;vlf_comms2.c: 799: T2CON = (4 << 3) | 0;
   799  0B88  3020               	movlw	32
   800  0B89  0092               	movwf	18
   801                           ;vlf_comms2.c: 800: PR2 = (BYTE)((2000000/(1<<(
      +                          2*0))/((35714.2857))) - 1);
   802  0B8A  3037               	movlw	55
   803  0B8B  1683               	bsf	3,5
   804  0B8C  0092               	movwf	18
   805                           ;vlf_comms2.c: 806: CCPR1L = (BYTE)(2000000/(1<
      +                          <(2*0))*4/((35714.2857))/2) >> 2;
   806  0B8D  301C               	movlw	28
   807  0B8E  1283               	bcf	3,5
   808  0B8F  0095               	movwf	21	;volatile
   809                           ;vlf_comms2.c: 807: CCP1CON = ( ( (BYTE)(200000
      +                          0/(1<<(2*0))*4/((35714.2857))/2) & 3 ) << 4 );
   810  0B90  0197               	clrf	23	;volatile
   811                           ;vlf_comms2.c: 809: vtx.cnt = 0;
   812  0B91  1683               	bsf	3,5
   813  0B92  01A1               	clrf	(_vtx+1)^(0+128)
   814                           ;vlf_comms2.c: 810: vtx.state = VLF_TX_PACKET_P
      +                          REAMBLE;
   815  0B93  3002               	movlw	2
   816  0B94  00A0               	movwf	_vtx^(0+128)
   817                           ;vlf_comms2.c: 812: SWDTEN = 0;
   818  0B95  1283               	bcf	3,5
   819  0B96  1703               	bsf	3,6
   820  0B97  1005               	bcf	5,0
   821                           ;vlf_comms2.c: 813: OPTION = 0xC0 | 5;
   822  0B98  30C5               	movlw	-59
   823  0B99  1683               	bsf	3,5
   824  0B9A  1303               	bcf	3,6	;carry unused
   825  0B9B  0081               	movwf	1
   826                           ;vlf_comms2.c: 817: asm("clrwdt");
   827  0B9C  0064               	clrwdt	;#
   828                           ;vlf_comms2.c: 818: SWDTEN = 1;
   829  0B9D  1283               	bcf	3,5
   830  0B9E  1703               	bsf	3,6
   831  0B9F  1405               	bsf	5,0
   832                           ;vlf_comms2.c: 820: T0IF = 0;
   833  0BA0  110B               	bcf	11,2
   834                           ;vlf_comms2.c: 821: TMR0 = 0xFF;
   835  0BA1  30FF               	movlw	-1
   836  0BA2  1303               	bcf	3,6	;carry unused
   837  0BA3  0081               	movwf	1	;volatile
   838                           ;vlf_comms2.c: 822: T0IE = 1;
   839  0BA4  168B               	bsf	11,5
   840                           ;vlf_comms2.c: 823: TMR2ON = 1;
   841  0BA5  1512               	bsf	18,2
   842                           ;vlf_comms2.c: 824: }
   843  0BA6  0008               	return	;W free
   844  0BA7                     _get_crc
   845                           ;	_bit_cnt assigned to ?a_get_crc+0
   846  0000                     _get_crc$bit_cnt	set	?a_get_crc
   847                           ;	_crc assigned to ?a_get_crc+1
   848  0000                     _get_crc$crc	set	?a_get_crc+1
   849                           ;_crc stored from w
   850  0BA7  0183               	clrf	3	;select bank 0
   851  0BA8  00CD               	movwf	?a_get_crc+1
   852                           ;vlf_comms2.c: 157: static BYTE get_crc( BYTE c
      +                          rc, BYTE data )
   853  0BA9  01CC               	clrf	?a_get_crc
   854                           ;vlf_comms2.c: 163: { crc <<= 1;
   855  0BAA  1003               	bcf	3,0
   856  0BAB                     L2
   857                           ;vlf_comms2.c: 162: { if( crc & 0x80 )
   858  0BAB  1FCD               	btfss	?a_get_crc+1,7
   859  0BAC  2BB4               	goto	L1
   860  0BAD  0DCD               	rlf	?a_get_crc+1
   861                           ;vlf_comms2.c: 164: if( data & 0x80 )
   862  0BAE  1FCB               	btfss	?_get_crc,7
   863  0BAF  2BB1               	goto	l51
   864                           ;vlf_comms2.c: 165: crc |= 0x01;
   865  0BB0  144D               	bsf	?a_get_crc+1,0
   866  0BB1                     l51
   867                           ;vlf_comms2.c: 166: crc = crc ^ 0x85;
   868  0BB1  3085               	movlw	-123
   869  0BB2  06CD               	xorwf	?a_get_crc+1
   870                           ;vlf_comms2.c: 167: }
   871  0BB3  2BB7               	goto	l52
   872                           ;vlf_comms2.c: 168: else
   873  0BB4                     L1
   874  0BB4  0DCD               	rlf	?a_get_crc+1
   875                           ;vlf_comms2.c: 170: if( data & 0x80 )
   876  0BB5  1BCB               	btfsc	?_get_crc,7
   877                           ;vlf_comms2.c: 171: crc |= 0x01;
   878  0BB6  144D               	bsf	?a_get_crc+1,0
   879  0BB7                     l52
   880                           ;vlf_comms2.c: 172: }
   881  0BB7  1003               	bcf	3,0
   882  0BB8  0DCB               	rlf	?_get_crc
   883  0BB9  0ACC               	incf	?a_get_crc
   884  0BBA  3008               	movlw	8
   885  0BBB  024C               	subwf	?a_get_crc,w
   886  0BBC  1C03               	btfss	3,0
   887  0BBD  2BAB               	goto	L2
   888                           ;vlf_comms2.c: 174: }
   889  0BBE  084D               	movf	?a_get_crc+1,w
   890                           ;vlf_comms2.c: 176: }
   891  0BBF  0008               	return	;uses W
   892  0BC0                     __end_of_get_crc
   893                           ;       param _crc assigned to ?_buffcrc+0
   894  0000                     _buffcrc$crc	set	?_buffcrc
   895                           ;       param _len assigned to ?_buffcrc+1
   896  0000                     _buffcrc$len	set	?_buffcrc+1
   897  0BC0                     _buffcrc
   898                           ;	_ptr assigned to ?a_buffcrc+0
   899  0000                     _buffcrc$ptr	set	?a_buffcrc
   900                           ;_ptr stored from w
   901  0BC0  0183               	clrf	3	;select bank 0
   902  0BC1  00CA               	movwf	?a_buffcrc
   903                           ;vlf_comms2.c: 181: static BYTE buffcrc( BYTE *
      +                          ptr, BYTE crc, uchar len )
   904  0BC2  2BCC               	goto	l55
   905  0BC3                     l56
   906                           ;vlf_comms2.c: 184: crc = get_crc( crc, *ptr++ 
      +                          );
   907  0BC3  0ACA               	incf	?a_buffcrc
   908  0BC4  034A               	decf	?a_buffcrc,w
   909  0BC5  0084               	movwf	4
   910  0BC6  1383               	bcf	3,7
   911  0BC7  0800               	movf	0,w
   912  0BC8  00CB               	movwf	?_get_crc
   913  0BC9  0848               	movf	?_buffcrc,w
   914  0BCA  23A7               	fcall	_get_crc
   915  0BCB  00C8               	movwf	?_buffcrc
   916  0BCC                     l55
   917  0BCC  03C9               	decf	?_buffcrc+1
   918  0BCD  0F49               	incfsz	?_buffcrc+1,w
   919  0BCE  2BC3               	goto	l56
   920                           ;vlf_comms2.c: 185: return( crc );
   921  0BCF  0848               	movf	?_buffcrc,w
   922                           ;vlf_comms2.c: 186: }
   923  0BD0  0008               	return	;uses W
   924  0BD1                     __end_of_VLF_ReplyLocateRequest
   925  0BD1                     _VLF_StartReceiver
   926                           ;vlf_comms2.c: 740: void VLF_StartReceiver(void
      +                          )
   927  0BD1  3009               	movlw	9
   928  0BD2  1683               	bsf	3,5
   929  0BD3  1303               	bcf	3,6	;carry unused
   930  0BD4  00A6               	movwf	(_vtx+6)^(0+128)
   931                           ;vlf_comms2.c: 743: vrx.len = 0;
   932  0BD5  01B1               	clrf	(_vrx+2)^(0+128)
   933                           ;vlf_comms2.c: 744: vrx.cnt = 0;
   934  0BD6  01B0               	clrf	(_vrx+1)^(0+128)
   935                           ;vlf_comms2.c: 745: vtx.state = VLF_TX_IDLE;
   936  0BD7  01A0               	clrf	_vtx^(0+128)
   937                           ;vlf_comms2.c: 746: vrx.state = VLF_RX_SEEKING;
   938  0BD8  01AF               	clrf	_vrx^(0+128)
   939  0BD9  0AAF               	incf	_vrx^(0+128)
   940                           ;vlf_comms2.c: 747: vlf_state = VLF_STATE_IDLE;
   941  0BDA  1283               	bcf	3,5
   942  0BDB  01CF               	clrf	_vlf_state	;volatile
   943                           ;vlf_comms2.c: 749: vrx.prev_preamble_score = 0
      +                          xFFFF;
   944  0BDC  30FF               	movlw	255
   945  0BDD  1683               	bsf	3,5
   946  0BDE  00B6               	movwf	(_vrx+7)^(0+128)
   947  0BDF  00B7               	movwf	((_vrx+7)^(0+128)+1)
   948                           ;vlf_comms2.c: 751: SWDTEN = 0;
   949  0BE0  1283               	bcf	3,5
   950  0BE1  1703               	bsf	3,6
   951  0BE2  1005               	bcf	5,0
   952                           ;vlf_comms2.c: 754: OPTION = 0x68;
   953  0BE3  3068               	movlw	104
   954  0BE4  1683               	bsf	3,5
   955  0BE5  1303               	bcf	3,6	;carry unused
   956  0BE6  0081               	movwf	1
   957                           ;vlf_comms2.c: 756: asm("clrwdt");
   958  0BE7  0064               	clrwdt	;#
   959                           ;vlf_comms2.c: 757: SWDTEN = 1;
   960  0BE8  1283               	bcf	3,5
   961  0BE9  1703               	bsf	3,6
   962  0BEA  1405               	bsf	5,0
   963                           ;vlf_comms2.c: 764: TMR0 = 0;
   964  0BEB  1303               	bcf	3,6	;carry unused
   965  0BEC  0181               	clrf	1	;volatile
   966                           ;vlf_comms2.c: 765: T2CON = ( 4 << 3 ) | 1;
   967  0BED  3021               	movlw	33
   968  0BEE  0092               	movwf	18
   969                           ;vlf_comms2.c: 766: PR2 = ((2000000/(1<<(2*1))/
      +                          (4+1)/((100))/((4))) - 1);
   970  0BEF  30F9               	movlw	-7
   971  0BF0  1683               	bsf	3,5
   972  0BF1  0092               	movwf	18
   973                           ;vlf_comms2.c: 767: TMR2 = 0;
   974  0BF2  1283               	bcf	3,5
   975  0BF3  0191               	clrf	17	;volatile
   976                           ;vlf_comms2.c: 768: TMR2ON = 1;
   977  0BF4  1512               	bsf	18,2
   978                           ;vlf_comms2.c: 770: TMR2IF = 0;
   979  0BF5  108C               	bcf	12,1
   980                           ;vlf_comms2.c: 771: TMR2IE = 1;
   981  0BF6  1683               	bsf	3,5
   982  0BF7  148C               	bsf	12,1
   983                           ;vlf_comms2.c: 772: }
   984  0BF8  1283               	bcf	3,5
   985  0BF9  0008               	return	;W free
   986  0BFA                     __end_of_VLF_Busy
   987  0BFA                     _VLF_ProcessPacket
   988                           ;	_crc assigned to ?a_VLF_ProcessPacket+0
   989  0000                     _VLF_ProcessPacket$crc	set	?a_VLF_ProcessPacket
   990                           ;vlf_comms2.c: 211: BYTE VLF_ProcessPacket(void
      +                          )
   991  0BFA  3009               	movlw	9
   992  0BFB  1683               	bsf	3,5
   993  0BFC  1303               	bcf	3,6	;carry unused
   994  0BFD  0226               	subwf	(_vtx+6)^(0+128),w
   995  0BFE  1C03               	btfss	3,0
   996  0BFF  2C02               	goto	l61
   997                           ;vlf_comms2.c: 220: { VLF_StartReceiver();
   998  0C00  23D1               	fcall	_VLF_StartReceiver
   999                           ;vlf_comms2.c: 226: return( 1 );
  1000  0C01  3401               	retlw	1
  1001  0C02                     l61
  1002                           ;vlf_comms2.c: 227: }
  1003  0C02  0E26               	swapf	(_vtx+6)^(0+128),w
  1004  0C03  39F0               	andlw	240
  1005  0C04  1283               	bcf	3,5
  1006  0C05  00CB               	movwf	?_get_crc
  1007  0C06  30F5               	movlw	-11
  1008  0C07  23A7               	fcall	_get_crc
  1009  0C08  00BD               	movwf	?a_VLF_ProcessPacket
  1010                           ;vlf_comms2.c: 230: crc = buffcrc( &vtx.u.data[
      +                          0], crc, ( (BYTE)(uncoded_rx_data_size[vtx.type
      +                          ] + 1) ) - 1 );
  1011  0C09  00C8               	movwf	?_buffcrc
  1012  0C0A  3010               	movlw	_uncoded_rx_data_size shr (0+8)
  1013  0C0B  008A               	movwf	10
  1014  0C0C  1683               	bsf	3,5
  1015  0C0D  0826               	movf	(_vtx+6)^(0+128),w
  1016  0C0E  206E               	call	((_uncoded_rx_data_size+-1)& (0+2047))| (
      +                          ($)& (0+-2048))
  1017  0C0F  3E00               	addlw	256
  1018  0C10  1283               	bcf	3,5
  1019  0C11  00C9               	movwf	?_buffcrc+1
  1020  0C12  30A7               	movlw	_vtx+7
  1021  0C13  120A  158A  23C0   	fcall	_buffcrc
  1022  0C16  00BD               	movwf	?a_VLF_ProcessPacket
  1023                           ;vlf_comms2.c: 231: crc = get_crc( crc, 0x00 );
  1024  0C17  01CB               	clrf	?_get_crc
  1025  0C18  23A7               	fcall	_get_crc
  1026  0C19  00BD               	movwf	?a_VLF_ProcessPacket
  1027                           ;vlf_comms2.c: 234: if( vtx.u.data[( (BYTE)(unc
      +                          oded_rx_data_size[vtx.type] ) )] != crc )
  1028  0C1A  3010               	movlw	_uncoded_rx_data_size shr (0+8)
  1029  0C1B  008A               	movwf	10
  1030  0C1C  1683               	bsf	3,5
  1031  0C1D  0826               	movf	(_vtx+6)^(0+128),w
  1032  0C1E  206E               	call	((_uncoded_rx_data_size+-1)& (0+2047))| (
      +                          ($)& (0+-2048))
  1033  0C1F  120A  158A         	pagesel	$
  1034  0C21  3EA7               	addlw	_vtx+7
  1035  0C22  0084               	movwf	4
  1036  0C23  1383               	bcf	3,7
  1037  0C24  0800               	movf	0,w
  1038  0C25  1283               	bcf	3,5
  1039  0C26  063D               	xorwf	?a_VLF_ProcessPacket,w
  1040  0C27  1903               	btfsc	3,2
  1041  0C28  2D00               	goto	l64
  1042                           ;vlf_comms2.c: 235: { VLF_StartReceiver();
  1043  0C29  23D1               	fcall	_VLF_StartReceiver
  1044                           ;vlf_comms2.c: 239: return( 2 );
  1045  0C2A  3402               	retlw	2
  1046                           ;vlf_comms2.c: 240: }
  1047  0C2B                     l65
  1048                           ;vlf_comms2.c: 244: {
  1049                           ;vlf_comms2.c: 247: if( ( vtx.u.det_cmd.sid != 
      +                          vtx.sid )||( vtx.u.det_cmd.seq != vtx.seq ) )
  1050  0C2B  0827               	movf	(_vtx+7)^(0+128),w
  1051  0C2C  0625               	xorwf	(_vtx+5)^(0+128),w
  1052  0C2D  1D03               	btfss	3,2
  1053  0C2E  2C33               	goto	u130
  1054  0C2F  0828               	movf	(_vtx+8)^(0+128),w
  1055  0C30  0624               	xorwf	(_vtx+4)^(0+128),w
  1056  0C31  1903               	btfsc	3,2
  1057  0C32  2D1A               	goto	l63
  1058  0C33                     u130
  1059                           ;vlf_comms2.c: 248: {
  1060  0C33  1283               	bcf	3,5
  1061  0C34  0822               	movf	_lamp_state,w
  1062  0C35  3A02               	xorlw	2
  1063  0C36  1D03               	btfss	3,2
  1064  0C37  2C40               	goto	l67
  1065                           ;vlf_comms2.c: 251: { lamp_state = LAMP_NORMAL_
      +                          STATE;
  1066  0C38  30F0               	movlw	-16
  1067  0C39  00A2               	movwf	_lamp_state
  1068                           ;vlf_comms2.c: 254: RC1 = ( mu_flags & (0x04) )
      +                           ? 1 : 0;
  1069  0C3A  1D24               	btfss	_mu_flags,2
  1070  0C3B  2C3E               	goto	u150
  1071  0C3C  1487               	bsf	7,1
  1072  0C3D  2C46               	goto	l68
  1073  0C3E                     u150
  1074  0C3E  1087               	bcf	7,1
  1075                           ;vlf_comms2.c: 258: }
  1076  0C3F  2C46               	goto	l68
  1077  0C40                     l67
  1078                           ;vlf_comms2.c: 259: else if( lamp_state == LAMP
      +                          _VLF_BLOCKED_STATE )
  1079  0C40  0822               	movf	_lamp_state,w
  1080  0C41  3A08               	xorlw	8
  1081  0C42  1D03               	btfss	3,2
  1082  0C43  2C46               	goto	l68
  1083                           ;vlf_comms2.c: 260: {
  1084  0C44  23D1               	fcall	_VLF_StartReceiver
  1085                           ;vlf_comms2.c: 274: return( 0 );
  1086  0C45  3400               	retlw	0
  1087  0C46                     l68
  1088                           ;vlf_comms2.c: 275: }
  1089  0C46  307A               	movlw	122
  1090  0C47  1303               	bcf	3,6	;carry unused
  1091  0C48  00C6               	movwf	?_delay_ms
  1092  0C49  3003               	movlw	3
  1093  0C4A  00C7               	movwf	?_delay_ms+1
  1094  0C4B  120A  158A  203F   	fcall	_delay_ms
      +       120A  158A         
  1095                           ;vlf_comms2.c: 281: VLF_ReplyToBroadcastRequest
      +                          ( 10 );
  1096  0C50  300A               	movlw	10
  1097  0C51  255F  120A  158A   	fcall	_VLF_ReplyToBroadcastRequest
  1098                           ;vlf_comms2.c: 282: return( 0 );
  1099  0C54  3400               	retlw	0
  1100                           ;vlf_comms2.c: 283: }
  1101  0C55                     l70
  1102                           ;vlf_comms2.c: 287: case VLF_MU_MASK:
  1103                           ;vlf_comms2.c: 288: if(
  1104  0C55  0829               	movf	(_vtx+9)^(0+128),w
  1105  0C56  1283               	bcf	3,5
  1106  0C57  062B               	xorwf	_mid+1,w
  1107  0C58  1D03               	btfss	3,2
  1108  0C59  2D1A               	goto	l63
  1109  0C5A  1683               	bsf	3,5
  1110  0C5B  0828               	movf	(_vtx+8)^(0+128),w
  1111  0C5C  1283               	bcf	3,5
  1112  0C5D  062C               	xorwf	_mid+2,w
  1113  0C5E  1D03               	btfss	3,2
  1114  0C5F  2D1A               	goto	l63
  1115  0C60  1683               	bsf	3,5
  1116  0C61  0827               	movf	(_vtx+7)^(0+128),w
  1117  0C62  1283               	bcf	3,5
  1118  0C63  062D               	xorwf	_mid+3,w
  1119  0C64  1D03               	btfss	3,2
  1120  0C65  2D1A               	goto	l63
  1121                           ;vlf_comms2.c: 292: {
  1122  0C66  3078               	movlw	120
  1123  0C67  00C6               	movwf	?_delay_ms
  1124  0C68  3005               	movlw	5
  1125  0C69  00C7               	movwf	?_delay_ms+1
  1126  0C6A  120A  158A  203F   	fcall	_delay_ms
      +       120A  158A         
  1127                           ;vlf_comms2.c: 295: if( lamp_state != LAMP_SEAR
      +                          CH_IN_PROGRESS )
  1128  0C6F  0822               	movf	_lamp_state,w
  1129  0C70  3A02               	xorlw	2
  1130  0C71  1903               	btfsc	3,2
  1131  0C72  2C7D               	goto	l72
  1132                           ;vlf_comms2.c: 296: { lamp_state = LAMP_SEARCH_
      +                          IN_PROGRESS;
  1133  0C73  3002               	movlw	2
  1134  0C74  00A2               	movwf	_lamp_state
  1135                           ;vlf_comms2.c: 297: lamp_timeout = (timer.cnt +
      +                           (ushort)((ushort)( 3*60*(15.2588))));
  1136  0C75  30BA               	movlw	186
  1137  0C76  0734               	addwf	_timer,w	;volatile
  1138  0C77  00A6               	movwf	_lamp_timeout
  1139  0C78  300A               	movlw	10
  1140  0C79  1803               	btfsc	3,0
  1141  0C7A  300B               	movlw	11
  1142  0C7B  0735               	addwf	_timer+1,w	;volatile
  1143  0C7C  00A7               	movwf	_lamp_timeout+1
  1144  0C7D                     l72
  1145                           ;vlf_comms2.c: 298: }
  1146  0C7D  1683               	bsf	3,5
  1147  0C7E  082B               	movf	(_vtx+11)^(0+128),w
  1148  0C7F  00A4               	movwf	(_vtx+4)^(0+128)
  1149                           ;vlf_comms2.c: 300: vtx.sid = vtx.u.msk_cmd.sid
      +                          ;
  1150  0C80  082A               	movf	(_vtx+10)^(0+128),w
  1151  0C81  00A5               	movwf	(_vtx+5)^(0+128)
  1152                           ;vlf_comms2.c: 301: VLF_SendGeneric();
  1153  0C82  251C  120A  158A   	fcall	_VLF_SendGeneric
  1154                           ;vlf_comms2.c: 302: return( 0 );
  1155  0C85  3400               	retlw	0
  1156                           ;vlf_comms2.c: 303: }
  1157  0C86                     l73
  1158                           ;vlf_comms2.c: 306: case VLF_MU_QUICK_SEARCH_X:
  1159                           ;vlf_comms2.c: 307: delay_ms( ((3*85)+20) );
  1160  0C86  3013               	movlw	19
  1161  0C87  1283               	bcf	3,5
  1162  0C88  00C6               	movwf	?_delay_ms
  1163  0C89  3001               	movlw	1
  1164  0C8A  00C7               	movwf	?_delay_ms+1
  1165  0C8B  120A  158A  203F   	fcall	_delay_ms
  1166  0C8E                     l74
  1167                           ;vlf_comms2.c: 309: case VLF_MU_QUICK_SEARCH_Y:
  1168                           ;vlf_comms2.c: 310: delay_ms( ((3*85)+20) );
  1169  0C8E  3013               	movlw	19
  1170  0C8F  1283               	bcf	3,5
  1171  0C90  00C6               	movwf	?_delay_ms
  1172  0C91  3001               	movlw	1
  1173  0C92  00C7               	movwf	?_delay_ms+1
  1174  0C93  120A  158A  203F   	fcall	_delay_ms
      +       120A  158A         
  1175  0C98                     l75
  1176                           ;vlf_comms2.c: 312: case VLF_MU_QUICK_SEARCH_Z:
  1177                           ;vlf_comms2.c: 314: if( lamp_state == LAMP_VLF_
      +                          BLOCKED_STATE )
  1178  0C98  1283               	bcf	3,5
  1179  0C99  0822               	movf	_lamp_state,w
  1180  0C9A  3A08               	xorlw	8
  1181  0C9B  1D03               	btfss	3,2
  1182  0C9C  2C9F               	goto	l76
  1183                           ;vlf_comms2.c: 315: VLF_StartReceiver();
  1184  0C9D  23D1               	fcall	_VLF_StartReceiver
  1185  0C9E  3400               	retlw	0
  1186  0C9F                     l76
  1187                           ;vlf_comms2.c: 316: else
  1188  0C9F  3005               	movlw	5
  1189  0CA0  255F  120A  158A   	fcall	_VLF_ReplyToBroadcastRequest
  1190                           ;vlf_comms2.c: 318: return( 0 );
  1191  0CA3  3400               	retlw	0
  1192  0CA4                     l78
  1193                           ;vlf_comms2.c: 320: case VLF_MU_LOCATE:
  1194                           ;vlf_comms2.c: 321: if(
  1195  0CA4  0829               	movf	(_vtx+9)^(0+128),w
  1196  0CA5  1283               	bcf	3,5
  1197  0CA6  062B               	xorwf	_mid+1,w
  1198  0CA7  1D03               	btfss	3,2
  1199  0CA8  2D1A               	goto	l63
  1200  0CA9  1683               	bsf	3,5
  1201  0CAA  0828               	movf	(_vtx+8)^(0+128),w
  1202  0CAB  1283               	bcf	3,5
  1203  0CAC  062C               	xorwf	_mid+2,w
  1204  0CAD  1D03               	btfss	3,2
  1205  0CAE  2D1A               	goto	l63
  1206  0CAF  1683               	bsf	3,5
  1207  0CB0  0827               	movf	(_vtx+7)^(0+128),w
  1208  0CB1  1283               	bcf	3,5
  1209  0CB2  062D               	xorwf	_mid+3,w
  1210  0CB3  1D03               	btfss	3,2
  1211  0CB4  2D1A               	goto	l63
  1212                           ;vlf_comms2.c: 325: { delay_ms( ((7*85)+20) * 2
      +                           );
  1213  0CB5  30CE               	movlw	206
  1214  0CB6  00C6               	movwf	?_delay_ms
  1215  0CB7  3004               	movlw	4
  1216  0CB8  00C7               	movwf	?_delay_ms+1
  1217  0CB9  120A  158A  203F   	fcall	_delay_ms
      +       120A  158A         
  1218                           ;vlf_comms2.c: 326: VLF_ReplyLocateRequest( vtx
      +                          .u.loc_cmd.duration );
  1219  0CBE  1683               	bsf	3,5
  1220  0CBF  082A               	movf	(_vtx+10)^(0+128),w
  1221  0CC0  257F               	fcall	_VLF_ReplyLocateRequest
  1222                           ;vlf_comms2.c: 327: VLF_StartReceiver();
  1223  0CC1  23D1               	fcall	_VLF_StartReceiver
  1224                           ;vlf_comms2.c: 328: return( 0 );
  1225  0CC2  3400               	retlw	0
  1226                           ;vlf_comms2.c: 329: }
  1227  0CC3                     l80
  1228                           ;vlf_comms2.c: 332: case VLF_MU_TEST:
  1229                           ;vlf_comms2.c: 334: VLF_SendGeneric();
  1230  0CC3  251C  120A  158A   	fcall	_VLF_SendGeneric
  1231                           ;vlf_comms2.c: 336: return( 0 );
  1232  0CC6  3400               	retlw	0
  1233  0CC7                     l81
  1234                           ;vlf_comms2.c: 339: case VLF_MU_MASK_FULL:
  1235                           ;vlf_comms2.c: 340: if(
  1236  0CC7  0829               	movf	(_vtx+9)^(0+128),w
  1237  0CC8  1283               	bcf	3,5
  1238  0CC9  062B               	xorwf	_mid+1,w
  1239  0CCA  1D03               	btfss	3,2
  1240  0CCB  2D1A               	goto	l63
  1241  0CCC  1683               	bsf	3,5
  1242  0CCD  0828               	movf	(_vtx+8)^(0+128),w
  1243  0CCE  1283               	bcf	3,5
  1244  0CCF  062C               	xorwf	_mid+2,w
  1245  0CD0  1D03               	btfss	3,2
  1246  0CD1  2D1A               	goto	l63
  1247  0CD2  1683               	bsf	3,5
  1248  0CD3  0827               	movf	(_vtx+7)^(0+128),w
  1249  0CD4  1283               	bcf	3,5
  1250  0CD5  062D               	xorwf	_mid+3,w
  1251  0CD6  1D03               	btfss	3,2
  1252  0CD7  2D1A               	goto	l63
  1253                           ;vlf_comms2.c: 344: {
  1254  0CD8  3078               	movlw	120
  1255  0CD9  00C6               	movwf	?_delay_ms
  1256  0CDA  3005               	movlw	5
  1257  0CDB  00C7               	movwf	?_delay_ms+1
  1258  0CDC  120A  158A  203F   	fcall	_delay_ms
      +       120A  158A         
  1259                           ;vlf_comms2.c: 347: lamp_min_cnt = vtx.u.msk_fu
      +                          ll_cmd.timer;
  1260  0CE1  1683               	bsf	3,5
  1261  0CE2  082A               	movf	(_vtx+10)^(0+128),w
  1262  0CE3  1283               	bcf	3,5
  1263  0CE4  00A1               	movwf	_lamp_min_cnt
  1264                           ;vlf_comms2.c: 348: if( lamp_min_cnt )
  1265  0CE5  08A1               	movf	_lamp_min_cnt
  1266  0CE6  1903               	btfsc	3,2
  1267  0CE7  2CF3               	goto	l83
  1268                           ;vlf_comms2.c: 349: { lamp_state = LAMP_VLF_BLO
      +                          CKED_STATE;
  1269  0CE8  3008               	movlw	8
  1270  0CE9  00A2               	movwf	_lamp_state
  1271                           ;vlf_comms2.c: 350: lamp_timeout = (timer.cnt +
      +                           (ushort)((ushort)( 60*(15.2588))));
  1272  0CEA  3093               	movlw	147
  1273  0CEB  0734               	addwf	_timer,w	;volatile
  1274  0CEC  00A6               	movwf	_lamp_timeout
  1275  0CED  3003               	movlw	3
  1276  0CEE  1803               	btfsc	3,0
  1277  0CEF  3004               	movlw	4
  1278  0CF0  0735               	addwf	_timer+1,w	;volatile
  1279  0CF1  00A7               	movwf	_lamp_timeout+1
  1280                           ;vlf_comms2.c: 351: }
  1281  0CF2  2CFA               	goto	l84
  1282  0CF3                     l83
  1283                           ;vlf_comms2.c: 352: else
  1284  0CF3  30F0               	movlw	-16
  1285  0CF4  00A2               	movwf	_lamp_state
  1286                           ;vlf_comms2.c: 355: RC1 = ( mu_flags & (0x04) )
      +                           ? 1 : 0;
  1287  0CF5  1D24               	btfss	_mu_flags,2
  1288  0CF6  2CF9               	goto	u360
  1289  0CF7  1487               	bsf	7,1
  1290  0CF8  2CFA               	goto	l84
  1291  0CF9                     u360
  1292  0CF9  1087               	bcf	7,1
  1293  0CFA                     l84
  1294                           ;vlf_comms2.c: 359: }
  1295  0CFA  251C  120A  158A   	fcall	_VLF_SendGeneric
  1296                           ;vlf_comms2.c: 361: return( 0 );
  1297  0CFD  3400               	retlw	0
  1298                           ;vlf_comms2.c: 362: }
  1299  0CFE                     l85
  1300                           ;vlf_comms2.c: 396: default:
  1301                           ;vlf_comms2.c: 397: VLF_StartReceiver();
  1302  0CFE  23D1               	fcall	_VLF_StartReceiver
  1303                           ;vlf_comms2.c: 398: return( 3 );
  1304  0CFF  3403               	retlw	3
  1305  0D00                     l64
  1306  0D00  1683               	bsf	3,5
  1307  0D01  0826               	movf	(_vtx+6)^(0+128),w
  1308  0D02  1903               	btfsc	3,2
  1309  0D03  2C2B               	goto	l65
  1310  0D04  3A01               	xorlw	1
  1311  0D05  1903               	btfsc	3,2
  1312  0D06  2C55               	goto	l70
  1313  0D07  3A03               	xorlw	3
  1314  0D08  1903               	btfsc	3,2
  1315  0D09  2C8E               	goto	l74
  1316  0D0A  3A01               	xorlw	1
  1317  0D0B  1903               	btfsc	3,2
  1318  0D0C  2C98               	goto	l75
  1319  0D0D  3A07               	xorlw	7
  1320  0D0E  1903               	btfsc	3,2
  1321  0D0F  2CA4               	goto	l78
  1322  0D10  3A02               	xorlw	2
  1323  0D11  1903               	btfsc	3,2
  1324  0D12  2C86               	goto	l73
  1325  0D13  3A01               	xorlw	1
  1326  0D14  1903               	btfsc	3,2
  1327  0D15  2CC3               	goto	l80
  1328  0D16  3A0F               	xorlw	15
  1329  0D17  1903               	btfsc	3,2
  1330  0D18  2CC7               	goto	l81
  1331  0D19  2CFE               	goto	l85
  1332  0D1A                     l63
  1333                           ;vlf_comms2.c: 401: VLF_StartReceiver();
  1334  0D1A  23D1               	fcall	_VLF_StartReceiver
  1335                           ;vlf_comms2.c: 402: return( 0 );
  1336  0D1B  3400               	retlw	0
  1337  0D1C                     __end_of_VLF_SendPacket
  1338  0D1C                     _VLF_SendGeneric
  1339                           ;	_crc assigned to ?a_VLF_SendGeneric+0
  1340  0000                     _VLF_SendGeneric$crc	set	?a_VLF_SendGeneric
  1341                           ;vlf_comms2.c: 829: void VLF_SendGeneric(void)
  1342  0D1C  1683               	bsf	3,5
  1343  0D1D  1303               	bcf	3,6	;carry unused
  1344  0D1E  01A6               	clrf	(_vtx+6)^(0+128)
  1345                           ;vlf_comms2.c: 833: vtx.u.responce.mid_s.val[0]
      +                           = mid.b[3];
  1346  0D1F  1283               	bcf	3,5
  1347  0D20  082D               	movf	_mid+3,w
  1348  0D21  1683               	bsf	3,5
  1349  0D22  00A7               	movwf	(_vtx+7)^(0+128)
  1350                           ;vlf_comms2.c: 834: vtx.u.responce.mid_s.val[1]
      +                           = mid.b[2];
  1351  0D23  1283               	bcf	3,5
  1352  0D24  082C               	movf	_mid+2,w
  1353  0D25  1683               	bsf	3,5
  1354  0D26  00A8               	movwf	(_vtx+8)^(0+128)
  1355                           ;vlf_comms2.c: 835: vtx.u.responce.mid_s.val[2]
      +                           = mid.b[1];
  1356  0D27  1283               	bcf	3,5
  1357  0D28  082B               	movf	_mid+1,w
  1358  0D29  1683               	bsf	3,5
  1359  0D2A  00A9               	movwf	(_vtx+9)^(0+128)
  1360                           ;vlf_comms2.c: 836: vtx.u.responce.m.status = 0
      +                          ;
  1361  0D2B  01AA               	clrf	(_vtx+10)^(0+128)
  1362                           ;vlf_comms2.c: 840: vtx.u.responce.m.s.mobility
      +                           = 1;
  1363  0D2C  082A               	movf	(_vtx+10)^(0+128),w
  1364  0D2D  39F0               	andlw	-16
  1365  0D2E  3801               	iorlw	1
  1366  0D2F  00AA               	movwf	(_vtx+10)^(0+128)
  1367                           ;vlf_comms2.c: 842: vtx.u.responce.m.s.masked =
      +                           ( lamp_state == LAMP_SEARCH_IN_PROGRESS ) ? 1 
      +                          : 0;
  1368  0D30  1283               	bcf	3,5
  1369  0D31  0822               	movf	_lamp_state,w
  1370  0D32  3A02               	xorlw	2
  1371  0D33  3000               	movlw	0
  1372  0D34  1903               	btfsc	3,2
  1373  0D35  3001               	movlw	1
  1374  0D36  00F4               	movwf	btemp
  1375  0D37  0CF4               	rrf	btemp
  1376  0D38  0CF4               	rrf	btemp
  1377  0D39  1683               	bsf	3,5
  1378  0D3A  082A               	movf	(_vtx+10)^(0+128),w
  1379  0D3B  0674               	xorwf	btemp,w
  1380  0D3C  397F               	andlw	-129
  1381  0D3D  0674               	xorwf	btemp,w
  1382  0D3E  00AA               	movwf	(_vtx+10)^(0+128)
  1383                           ;vlf_comms2.c: 844: crc = buffcrc( vtx.u.data, 
      +                          0x28, 4 );
  1384  0D3F  3028               	movlw	40
  1385  0D40  1283               	bcf	3,5
  1386  0D41  00C8               	movwf	?_buffcrc
  1387  0D42  3004               	movlw	4
  1388  0D43  00C9               	movwf	?_buffcrc+1
  1389  0D44  30A7               	movlw	_vtx+7
  1390  0D45  23C0               	fcall	_buffcrc
  1391  0D46  00C7               	movwf	?a_VLF_SendGeneric
  1392                           ;vlf_comms2.c: 845: crc = get_crc( crc, 0x00 );
  1393  0D47  01CB               	clrf	?_get_crc
  1394  0D48  23A7               	fcall	_get_crc
  1395  0D49  00C7               	movwf	?a_VLF_SendGeneric
  1396                           ;vlf_comms2.c: 848: if( crc == 0xA5 )
  1397  0D4A  3AA5               	xorlw	-91
  1398  0D4B  1D03               	btfss	3,2
  1399  0D4C  2D5A               	goto	l165
  1400                           ;vlf_comms2.c: 849: { vtx.u.responce.m.s.bit6 =
      +                           1;
  1401  0D4D  1683               	bsf	3,5
  1402  0D4E  16AA               	bsf	(_vtx+10)^(0+128),5
  1403                           ;vlf_comms2.c: 850: crc = buffcrc( &vtx.u.data[
      +                          0], 0x28, 4 );
  1404  0D4F  3028               	movlw	40
  1405  0D50  1283               	bcf	3,5
  1406  0D51  00C8               	movwf	?_buffcrc
  1407  0D52  3004               	movlw	4
  1408  0D53  00C9               	movwf	?_buffcrc+1
  1409  0D54  30A7               	movlw	_vtx+7
  1410  0D55  23C0               	fcall	_buffcrc
  1411  0D56  00C7               	movwf	?a_VLF_SendGeneric
  1412                           ;vlf_comms2.c: 851: crc = get_crc( crc, 0x00 );
  1413  0D57  01CB               	clrf	?_get_crc
  1414  0D58  23A7               	fcall	_get_crc
  1415  0D59  00C7               	movwf	?a_VLF_SendGeneric
  1416  0D5A                     l165
  1417                           ;vlf_comms2.c: 852: }
  1418  0D5A  0847               	movf	?a_VLF_SendGeneric,w
  1419  0D5B  1683               	bsf	3,5
  1420  0D5C  00AB               	movwf	(_vtx+11)^(0+128)
  1421                           ;vlf_comms2.c: 854: VLF_SendPacket();
  1422  0D5D  2382               	fcall	_VLF_SendPacket
  1423                           ;vlf_comms2.c: 855: }
  1424  0D5E  0008               	return	;W free
  1425  0D5F                     __end_of_VLF_ProcessBitRead
  1426  0D5F                     _VLF_ReplyToBroadcastRequest
  1427                           ;	_intervals assigned to ?a_VLF_ReplyToBroadcas
      +                          tRequest+0
  1428  0000                     _VLF_ReplyToBroadcastRequest$intervals	set	?a_V
      +                          LF_ReplyToBroadcastRequest
  1429                           ;	_rand_time_u8 assigned to ?a_VLF_ReplyToBroad
      +                          castRequest+1
  1430  0000                     _VLF_ReplyToBroadcastRequest$rand_time_u8	set	?
      +                          a_VLF_ReplyToBroadcastRequest+1
  1431                           ;_intervals stored from w
  1432  0D5F  0183               	clrf	3	;select bank 0
  1433  0D60  00C4               	movwf	?a_VLF_ReplyToBroadcastRequest
  1434                           ;vlf_comms2.c: 676: void VLF_ReplyToBroadcastRe
      +                          quest( BYTE intervals )
  1435  0D61  160A  118A  261D   	fcall	_rand
  1436  0D64  0844               	movf	?a_VLF_ReplyToBroadcastRequest,w
  1437  0D65  00F6               	movwf	btemp+2
  1438  0D66  01F7               	clrf	btemp+3
  1439  0D67  120A  118A  22AC   	fcall	awmod
      +       120A  158A         
  1440  0D6C  0874               	movf	btemp,w
  1441  0D6D  00C5               	movwf	?a_VLF_ReplyToBroadcastRequest+1
  1442                           ;vlf_comms2.c: 680: while( rand_time_u8-- )
  1443  0D6E  2D78               	goto	l148
  1444  0D6F                     l149
  1445                           ;vlf_comms2.c: 681: delay_ms( 290 );
  1446  0D6F  3022               	movlw	34
  1447  0D70  00C6               	movwf	?_delay_ms
  1448  0D71  3001               	movlw	1
  1449  0D72  00C7               	movwf	?_delay_ms+1
  1450  0D73  120A  158A  203F   	fcall	_delay_ms
      +       120A  158A         
  1451  0D78                     l148
  1452  0D78  03C5               	decf	?a_VLF_ReplyToBroadcastRequest+1
  1453  0D79  0F45               	incfsz	?a_VLF_ReplyToBroadcastRequest+1,w
  1454  0D7A  2D6F               	goto	l149
  1455                           ;vlf_comms2.c: 682: VLF_SendGeneric();
  1456  0D7B  251C  120A  158A   	fcall	_VLF_SendGeneric
  1457                           ;vlf_comms2.c: 683: }
  1458  0D7E  0008               	return	;W free
  1459  0D7F                     __end_of_VLF_ReplyToBroadcastRequest
  1460  0D7F                     _VLF_ReplyLocateRequest
  1461                           ;	_locate_seconds assigned to ?a_VLF_ReplyLocat
      +                          eRequest+0
  1462  0000                     _VLF_ReplyLocateRequest$locate_seconds	set	?a_V
      +                          LF_ReplyLocateRequest
  1463                           ;	_timeout assigned to ?a_VLF_ReplyLocateReques
      +                          t+1
  1464  0000                     _VLF_ReplyLocateRequest$timeout	set	?a_VLF_Repl
      +                          yLocateRequest+1
  1465                           ;_locate_seconds stored from w
  1466  0D7F  0183               	clrf	3	;select bank 0
  1467  0D80  00C4               	movwf	?a_VLF_ReplyLocateRequest
  1468                           ;vlf_comms2.c: 688: void VLF_ReplyLocateRequest
      +                          ( uchar locate_seconds )
  1469  0D81  1003               	bcf	3,0
  1470  0D82  0DC4               	rlf	?a_VLF_ReplyLocateRequest
  1471                           ;vlf_comms2.c: 718: while( locate_seconds-- )
  1472  0D83  2DA2               	goto	l152
  1473  0D84                     l153
  1474                           ;vlf_comms2.c: 719: {
  1475  0D84  3008               	movlw	8
  1476  0D85  0734               	addwf	_timer,w	;volatile
  1477  0D86  00C5               	movwf	?a_VLF_ReplyLocateRequest+1
  1478  0D87  3000               	movlw	0
  1479  0D88  1803               	btfsc	3,0
  1480  0D89  3001               	movlw	1
  1481  0D8A  0735               	addwf	_timer+1,w	;volatile
  1482  0D8B  00C6               	movwf	?a_VLF_ReplyLocateRequest+2
  1483                           ;vlf_comms2.c: 722: VLF_SendGeneric();
  1484  0D8C  251C  120A  158A   	fcall	_VLF_SendGeneric
  1485                           ;vlf_comms2.c: 723: while( vtx.state != VLF_TX_
      +                          IDLE );
  1486  0D8F                     l155
  1487  0D8F  1683               	bsf	3,5
  1488  0D90  08A0               	movf	_vtx^(0+128)
  1489  0D91  1D03               	btfss	3,2
  1490  0D92  2D8F               	goto	l155
  1491                           ;vlf_comms2.c: 725: while( chk_timeout( timeout
      +                           ) == (0) )
  1492  0D93                     l158
  1493                           ;vlf_comms2.c: 726: {
  1494  0D93  1283               	bcf	3,5
  1495  0D94  0845               	movf	?a_VLF_ReplyLocateRequest+1,w
  1496  0D95  00C7               	movwf	?_chk_timeout
  1497  0D96  0846               	movf	?a_VLF_ReplyLocateRequest+2,w
  1498  0D97  00C8               	movwf	?_chk_timeout+1
  1499  0D98  160A  118A  25AA   	fcall	_chk_timeout
      +       120A  158A         
  1500  0D9D  00F4               	movwf	btemp
  1501  0D9E  01F5               	clrf	btemp+1
  1502  0D9F  0475               	iorwf	btemp+1,w
  1503  0DA0  1903               	btfsc	3,2
  1504  0DA1  2D93               	goto	l158
  1505  0DA2                     l152
  1506  0DA2  03C4               	decf	?a_VLF_ReplyLocateRequest
  1507  0DA3  0F44               	incfsz	?a_VLF_ReplyLocateRequest,w
  1508  0DA4  2D84               	goto	l153
  1509  0DA5  0008               	return
  1510                           
  1511                           	psect	text11
  1512  07FE                     __end_of_VLF_SendGeneric
  1513  0000                     
  1514  0000                     
  1515  0000                     
  1516  0000                     
  1517  0000                     
  1518  0000                     
  1519  0000                     
  1520  0000                     
  1521  0000                     
  1522  0000                     
  1523  0000                     
  1524  0000                     
  1525  0000                     
  1526  0000                     
  1527  0000                     
  1528  0000                     
  1529  0000                     
  1530  0000                     
  1531  0000                     
  1532  0000                     
  1533  0000                     
  1534  0000                     
  1535  0000                     
  1536  0000                     
  1537  0000                     
  1538  0000                     
  1539  0000                     
  1540  0000                     
  1541  0000                     
  1542  0000                     
  1543  0000                     
  1544  0000                     
  1545  0000                     
  1546  0000                     
  1547  0000                     
  1548  0000                     
  1549  0000                     
  1550  0000                     
  1551  0000                     
  1552  0000                     
  1553  0000                     
  1554  0000                     
  1555  0000                     
  1556  0000                     
  1557  0000                     
  1558  0000                     
  1559  0000                     
  1560  0000                     
  1561  0000                     
  1562  0000                     
  1563  0000                     
  1564  0000                     
  1565  0000                     
  1566  0000                     
  1567  0000                     
  1568  0000                     
  1569  0000                     
  1570  0000                     
  1571  0000                     
  1572  0000                     
  1573  0000                     
  1574  0000                     
  1575  0000                     
  1576  0000                     
  1577  0000                     
  1578  0000                     
  1579  0000                     
  1580  0000                     
  1581  0000                     
  1582  0000                     
  1583  0000                     
  1584  0000                     
  1585  0000                     
  1586  0000                     
  1587  0000                     
  1588  0000                     
  1589  0000                     
  1590  0000                     
  1591  0000                     
  1592  0000                     
  1593  0000                     
  1594  0000                     
  1595  0000                     
  1596  0000                     
  1597  0000                     
  1598  0000                     
  1599  0000                     
  1600  0000                     
  1601  0000                     
  1602  0000                     
  1603  0000                     
  1604  0000                     
  1605  0000                     
  1606  0000                     
  1607  0000                     
  1608  0000                     
  1609  0000                     
  1610  0000                     
  1611  0000                     
  1612  0000                     
  1613  0000                     
  1614  0000                     
  1615  0000                     
  1616  0000                     
  1617  0000                     
  1618  0000                     
  1619  0000                     
  1620  0000                     
  1621  0000                     
  1622  0000                     
  1623  0000                     
  1624  0000                     
  1625  0000                     
  1626  0000                     
  1627  0000                     
  1628  0000                     
  1629  0000                     
  1630  0000                     
  1631  0000                     
  1632  0000                     
  1633  0000                     
  1634  0000                     
  1635  0000                     
  1636  0000                     
  1637  0000                     
  1638  0000                     
  1639  0000                     
  1640  0000                     
  1641  0000                     
  1642  0000                     
  1643  0000                     
  1644  0000                     
  1645  0000                     
  1646  0000                     
  1647  0000                     
  1648  0000                     
  1649  0000                     
  1650  0000                     
  1651  0000                     
  1652  0000                     
  1653  0000                     
  1654  0000                     
  1655  0000                     
  1656  0000                     
  1657  0000                     
  1658  0000                     
  1659  0000                     
  1660  0000                     
  1661  0000                     
  1662  0000                     
  1663  0000                     
  1664  0000                     
  1665  0000                     
  1666  0000                     
  1667  0000                     
  1668  0000                     
  1669  0000                     
  1670  0000                     
  1671  0000                     
  1672  0000                     
  1673  0000                     
  1674  0000                     
  1675  0000                     
  1676  0000                     
  1677  0000                     
  1678  0000                     
  1679  0000                     
  1680  0000                     
  1681  0000                     
  1682  0000                     
  1683  0000                     
  1684  0000                     
  1685  0000                     
  1686  0000                     
  1687  0000                     
  1688  0000                     
  1689  0000                     
  1690  0000                     
  1691  0000                     
  1692  0000                     
  1693  0000                     
  1694  0000                     
  1695  0000                     
  1696  0000                     
  1697  0000                     
  1698  0000                     
  1699  0000                     
  1700  0000                     
  1701  0000                     
  1702  0000                     
  1703  0000                     
  1704  0000                     
  1705  0000                     
  1706  0000                     
  1707  0000                     
  1708  0000                     
  1709  0000                     
  1710  0000                     
  1711  0000                     
  1712  0000                     
  1713  0000                     
  1714  0000                     
  1715  0000                     
  1716  0000                     
  1717  0000                     
  1718  0000                     
  1719  0000                     
  1720  0000                     
  1721  0000                     
  1722  0000                     
  1723  0000                     
  1724  0000                     
  1725  0000                     
  1726  0000                     
  1727  0000                     
  1728  0000                     
  1729  0000                     
  1730  0000                     
  1731  0000                     
  1732  0000                     
  1733  0000                     
  1734  0000                     
  1735  0000                     
  1736  0000                     
  1737  0000                     
  1738  0000                     
  1739  0000                     
  1740  0000                     
  1741  0000                     
  1742  0000                     
  1743  0000                     
  1744  0000                     
  1745  0000                     
  1746  0000                     
  1747  0000                     
  1748  0000                     
  1749  0000                     
  1750  0000                     
  1751  0000                     
  1752  0000                     
  1753  0000                     
  1754  0000                     
  1755  0000                     
  1756  0000                     
  1757  0000                     
  1758  0000                     
  1759  0000                     
  1760  0000                     
  1761  0000                     
  1762  0000                     
  1763  0000                     
  1764  0000                     
  1765  0000                     
  1766  0000                     
  1767  0000                     
  1768  0000                     
  1769  0000                     
  1770  0000                     
  1771  0000                     
  1772  0000                     
  1773  0000                     
  1774  0000                     
  1775  0000                     
  1776  0000                     
  1777  0000                     
  1778  0000                     
  1779  0000                     
  1780  0000                     
  1781  0000                     
  1782  0000                     
  1783  0000                     
  1784  0000                     
  1785  0000                     
  1786  0000                     
  1787  0000                     
  1788  0000                     
  1789  0000                     
  1790  0000                     
  1791  0000                     
  1792  0000                     
  1793  0000                     
  1794  0000                     
  1795  0000                     
  1796  0000                     
  1797  0000                     
  1798  0000                     
  1799  0000                     
  1800  0000                     
  1801  0000                     
  1802  0000                     
  1803  0000                     
  1804  0000                     
  1805  0000                     
  1806  0000                     
  1807  0000                     
  1808  0000                     
  1809  0000                     
  1810  0000                     
  1811  0000                     
  1812  0000                     
  1813  0000                     
  1814  0000                     
  1815  0000                     
  1816  0000                     
  1817  0000                     
  1818  0000                     
  1819  0000                     
  1820  0000                     
  1821  0000                     
  1822  0000                     
  1823  0000                     
  1824  0000                     
  1825  0000                     
  1826  0000                     
  1827  0000                     
  1828  0000                     
  1829  0000                     
  1830  0000                     
  1831  0000                     
  1832  0000                     
  1833  0000                     
  1834  0000                     
  1835  0000                     
  1836  0000                     
  1837  0000                     
  1838  0000                     
  1839  0000                     
  1840  0000                     
  1841  0000                     
  1842  0000                     
  1843  0000                     
  1844  0000                     
  1845  0000                     
  1846  0000                     
  1847  0000                     
  1848  0000                     
  1849  0000                     
  1850  0000                     
  1851  0000                     
  1852  0000                     
  1853  0000                     
  1854  0000                     
  1855  0000                     
  1856  0000                     
  1857  0000                     
  1858  0000                     
  1859  0000                     
  1860  0000                     
  1861  0000                     
  1862  0000                     
  1863  0000                     
  1864  0000                     
  1865  0000                     
  1866  0000                     
  1867  0000                     
  1868  0000                     
  1869  0000                     
  1870  0000                     
  1871  0000                     
  1872  0000                     
  1873  0000                     
  1874  0000                     
  1875  0000                     
  1876  0000                     
  1877  0000                     
  1878  0000                     
  1879  0000                     
  1880  0000                     
  1881  0000                     
  1882  0000                     
  1883  0000                     
  1884  0000                     
  1885  0000                     
  1886  0000                     
  1887  0000                     
  1888  0000                     
  1889  0000                     
  1890  0000                     
  1891  0000                     
  1892  0000                     
  1893  0000                     
  1894  0000                     
  1895  0000                     
  1896  0000                     
  1897  0000                     
  1898  0000                     
  1899  0000                     
  1900  0000                     
  1901  0000                     
  1902  0000                     
  1903  0000                     
  1904  0000                     
  1905  0000                     
  1906  0000                     
  1907  0000                     
  1908  0000                     
  1909  0000                     
  1910  0000                     
  1911  0000                     
  1912  0000                     
  1913  0000                     
  1914  0000                     
  1915  0000                     
  1916  0000                     
  1917  0000                     
  1918  0000                     
  1919  0000                     
  1920  0000                     
  1921  0000                     
  1922  0000                     
  1923  0000                     
  1924  0000                     
  1925  0000                     
  1926  0000                     
  1927  0000                     
  1928  0000                     
  1929                           
  1930                           	psect	rbss_1
  1931  00A0                     _vtx
                     _vtx
  1932  00A0                     	ds	15
  1933  00AF                     _vrx
                     _vrx
  1934  00AF                     	ds	64
  1935                           
  1936                           	psect	temp
  1937  0074                     btemp
                     btemp
  1938  0074                     	ds	4


HI-TECH Software PICC Macro Assembler V9.60PL3 build 3862 
Symbol Table                                          Wed Apr 29 16:34:20 2020

                                _delay_ms 083F  
                __end_of_VLF_StopReceiver 0B82  
                                       pc 0002  
                            ?_chk_timeout 0047  
                         _VLF_SendGeneric 0D1C  
                                      l51 0BB1  
                                      l52 0BB7  
                                      l61 0C02  
                                      l70 0C55  
                                      l63 0D1A  
                                      l55 0BCC  
                                      l80 0CC3  
                                      l72 0C7D  
                                      l64 0D00  
                                      l56 0BC3  
               __end_of_VLF_StartReceiver 1546  
                                      l81 0CC7  
                                      l73 0C86  
                                      l65 0C2B  
                                      l74 0C8E  
                                      l58 1567  
                                      l91 098B  
                                      l83 0CF3  
                                      l75 0C98  
                                      l67 0C40  
                                      l59 1566  
                                      l84 0CFA  
                                      l76 0C9F  
                                      l68 0C46  
                                      l85 0CFE  
                                      l86 0B80  
                                      l94 09F1  
                                      l78 0CA4  
                                      l87 0B6C  
                                      l95 09E3  
                                      l88 0B5D  
                                      l89 0980  
                                      l98 09EF  
                                      l99 09EB  
                  _VLF_ReplyLocateRequest 0D7F  
                                      fsr 0004  
                                     l111 0A33  
                                     l103 0A25  
                        _VLF_StopReceiver 1546  
                                     l121 0ABA  
                                     l114 0A99  
                                     l115 0A8B  
                                     l140 0B4D  
                                     l133 0B26  
                                     l109 0A28  
                                     l118 0A97  
                                     l143 0B5B  
                                     l127 0AC2  
                                     l119 0A93  
                                     l152 0DA2  
                                     l144 0B6E  
                                     l136 0B2A  
                                     l153 0D84  
                                     l137 0B59  
                                     l129 0ACA  
                                     l155 0D8F  
                                     l139 0B46  
                                     l148 0D78  
                                     l165 0D5A  
                                     l149 0D6F  
                                     l158 0D93  
                        __end_of_VLF_Busy 0BFA  
                                     u130 0C33  
                                     u150 0C3E  
                                     u410 09E8  
                                     u360 0CF9  
                                     u620 0AB2  
                                     u550 0A90  
                                     u615 0AB0  
                                     u480 0A0A  
                                     u475 0A08  
               __end_of_VLF_ProcessPacket 097C  
                                ?_get_crc 004B  
                                ?_buffcrc 0048  
                                     _mid 002A  
                                     _vrx 00AF  
                                     _vtx 00A0  
                          _su2mu_preamble 104A  
                ?a_VLF_ReplyLocateRequest 0044  
                      _VLF_ProcessBitRead 097C  
                                _mu_flags 0024  
                               ?a_get_crc 004C  
                               ?a_buffcrc 004A  
                               ?_delay_ms 0046  
                             _chk_timeout 15AA  
                            _aps_preamble 108B  
                                    _rand 161D  
                                    btemp 0074  
                                    awmod 02AC  
                         __end_of_get_crc 0BC0  
                         __end_of_buffcrc 155D  
                     ?a_VLF_ProcessPacket 003D  
                       ?a_VLF_SendGeneric 0047  
                              _lamp_state 0022  
     __end_of_VLF_ReplyToBroadcastRequest 0D7F  
             _VLF_ReplyToBroadcastRequest 0D5F  
                 __end_of_VLF_SendGeneric 07FE  
                                _VLF_Busy 155D  
                                 _get_crc 0BA7  
                                 _buffcrc 0BC0  
                          _VLF_SendPacket 0B82  
                       _VLF_StartReceiver 0BD1  
                               _vlf_state 004F  
                       _VLF_ProcessPacket 0BFA  
                    ?a_VLF_ProcessBitRead 003D  
                                   _timer 0034  
                                   pclath 000A  
                                   status 0003  
           ?a_VLF_ReplyToBroadcastRequest 0044  
                  __end_of_VLF_SendPacket 0D1C  
                    _uncoded_rx_data_size 106F  
                          _mu2su_preamble 1082  
          __end_of_VLF_ReplyLocateRequest 0BD1  
                            _lamp_min_cnt 0021  
              __end_of_VLF_ProcessBitRead 0D5F  
                              used_btemp0 0001  
                              used_btemp1 0001  
                              used_btemp2 0001  
                              used_btemp3 0001  
                            _lamp_timeout 0026  
